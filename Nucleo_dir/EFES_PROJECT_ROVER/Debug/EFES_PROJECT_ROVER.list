
EFES_PROJECT_ROVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cdc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003e7c  08003e7c  00004e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f04  08003f04  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f04  08003f04  00004f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f0c  08003f0c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f0c  08003f0c  00004f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f10  08003f10  00004f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  08003f70  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08003f70  000052c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092ea  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ae  00000000  00000000  0000e376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0000fa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000655  00000000  00000000  00010268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a95  00000000  00000000  000108bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a19b  00000000  00000000  00026352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008778a  00000000  00000000  000304ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7c77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  000b7cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ba334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e64 	.word	0x08003e64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003e64 	.word	0x08003e64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000574:	b0a4      	sub	sp, #144	@ 0x90
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fdfc 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 face 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fbcc 	bl	8000d1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 fba0 	bl	8000cc8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000588:	f000 fb32 	bl	8000bf0 <MX_SPI1_Init>
  MX_SPI3_Init();
 800058c:	f000 fb66 	bl	8000c5c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  //Chip select line of memory is high as default
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000596:	484c      	ldr	r0, [pc, #304]	@ (80006c8 <main+0x158>)
 8000598:	f001 f918 	bl	80017cc <HAL_GPIO_WritePin>
  	  //Chip Select of DE1 default low
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2140      	movs	r1, #64	@ 0x40
 80005a0:	484a      	ldr	r0, [pc, #296]	@ (80006cc <main+0x15c>)
 80005a2:	f001 f913 	bl	80017cc <HAL_GPIO_WritePin>


  	//reset the memory
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ac:	4846      	ldr	r0, [pc, #280]	@ (80006c8 <main+0x158>)
 80005ae:	f001 f90d 	bl	80017cc <HAL_GPIO_WritePin>
  	HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_CHIP_ERASE, 1, 100); //should return HAL_OK
 80005b2:	2364      	movs	r3, #100	@ 0x64
 80005b4:	2201      	movs	r2, #1
 80005b6:	4946      	ldr	r1, [pc, #280]	@ (80006d0 <main+0x160>)
 80005b8:	4846      	ldr	r0, [pc, #280]	@ (80006d4 <main+0x164>)
 80005ba:	f001 fe5a 	bl	8002272 <HAL_SPI_Transmit>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c4:	4840      	ldr	r0, [pc, #256]	@ (80006c8 <main+0x158>)
 80005c6:	f001 f901 	bl	80017cc <HAL_GPIO_WritePin>
  	//wait for reset
  	WaitBusyMem();
 80005ca:	f000 fa65 	bl	8000a98 <WaitBusyMem>




  	//resetting flags for status regs
    status_write = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	83fb      	strh	r3, [r7, #30]
    status_write = status_write | MEM_STAT_REG_1_WRITE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	461a      	mov	r2, r3
 80005d6:	8bfb      	ldrh	r3, [r7, #30]
 80005d8:	4313      	orrs	r3, r2
 80005da:	b29b      	uxth	r3, r3
 80005dc:	83fb      	strh	r3, [r7, #30]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e4:	4838      	ldr	r0, [pc, #224]	@ (80006c8 <main+0x158>)
 80005e6:	f001 f8f1 	bl	80017cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_WRITE_ENABLE, 1, 100); //should return HAL_OK
 80005ea:	2364      	movs	r3, #100	@ 0x64
 80005ec:	2201      	movs	r2, #1
 80005ee:	493a      	ldr	r1, [pc, #232]	@ (80006d8 <main+0x168>)
 80005f0:	4838      	ldr	r0, [pc, #224]	@ (80006d4 <main+0x164>)
 80005f2:	f001 fe3e 	bl	8002272 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fc:	4832      	ldr	r0, [pc, #200]	@ (80006c8 <main+0x158>)
 80005fe:	f001 f8e5 	bl	80017cc <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000608:	482f      	ldr	r0, [pc, #188]	@ (80006c8 <main+0x158>)
 800060a:	f001 f8df 	bl	80017cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, (uint8_t *)&status_write, 2, 100); //should return HAL_OK
 800060e:	f107 011e 	add.w	r1, r7, #30
 8000612:	2364      	movs	r3, #100	@ 0x64
 8000614:	2202      	movs	r2, #2
 8000616:	482f      	ldr	r0, [pc, #188]	@ (80006d4 <main+0x164>)
 8000618:	f001 fe2b 	bl	8002272 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000622:	4829      	ldr	r0, [pc, #164]	@ (80006c8 <main+0x158>)
 8000624:	f001 f8d2 	bl	80017cc <HAL_GPIO_WritePin>
    WaitBusyMem();
 8000628:	f000 fa36 	bl	8000a98 <WaitBusyMem>

    //PROVA

	  masked_addr = 0x00FFFFFF & 65536; //qui non dovrebbe servire, ma lo facciamo lo stesso
 800062c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000630:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  read_buffer = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
	  read_buffer = read_buffer | ((uint32_t) masked_addr) << 8;
 8000636:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000638:	021a      	lsls	r2, r3, #8
 800063a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063c:	4313      	orrs	r3, r2
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
	  read_buffer = read_buffer | ((uint32_t) MEM_READ_DATA);
 8000640:	2303      	movs	r3, #3
 8000642:	461a      	mov	r2, r3
 8000644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000646:	4313      	orrs	r3, r2
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  //read data
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000650:	481d      	ldr	r0, [pc, #116]	@ (80006c8 <main+0x158>)
 8000652:	f001 f8bb 	bl	80017cc <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&read_buffer, 4, 100);
 8000656:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800065a:	2364      	movs	r3, #100	@ 0x64
 800065c:	2204      	movs	r2, #4
 800065e:	481d      	ldr	r0, [pc, #116]	@ (80006d4 <main+0x164>)
 8000660:	f001 fe07 	bl	8002272 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, (uint8_t*)&spi_buf, 4, 100);
 8000664:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000668:	2364      	movs	r3, #100	@ 0x64
 800066a:	2204      	movs	r2, #4
 800066c:	4819      	ldr	r0, [pc, #100]	@ (80006d4 <main+0x164>)
 800066e:	f001 ff43 	bl	80024f8 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000678:	4813      	ldr	r0, [pc, #76]	@ (80006c8 <main+0x158>)
 800067a:	f001 f8a7 	bl	80017cc <HAL_GPIO_WritePin>


  	//resetting address
  	addr = 256 *257;		//per qualche motivo sembra che il priumo blocco di memoria sia inaccesibile
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <main+0x16c>)
 8000680:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  	data_stored = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  	pressed = 0;
 800068a:	4a15      	ldr	r2, [pc, #84]	@ (80006e0 <main+0x170>)
 800068c:	2300      	movs	r3, #0
 800068e:	7013      	strb	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
		 if(pressed == 1){		//PRESSED BLUEBUTTON
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <main+0x170>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	f040 80bc 	bne.w	8000812 <main+0x2a2>
				  //inizio stampa
				  uart_buffer_lenght = sprintf(uart_buffer, "PRINTING MEMORY CONTENT\r\n");
 800069a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800069e:	4911      	ldr	r1, [pc, #68]	@ (80006e4 <main+0x174>)
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 ff3f 	bl	8003524 <siprintf>
 80006a6:	67b8      	str	r0, [r7, #120]	@ 0x78
				  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buffer, uart_buffer_lenght, 100);
 80006a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <main+0x178>)
 80006b4:	f002 fb7a 	bl	8002dac <HAL_UART_Transmit>
				  addr_read = 256*257;
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <main+0x16c>)
 80006ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				  for (i = 0; i < data_stored; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80006c4:	e09b      	b.n	80007fe <main+0x28e>
 80006c6:	bf00      	nop
 80006c8:	40020000 	.word	0x40020000
 80006cc:	40020400 	.word	0x40020400
 80006d0:	08003eb4 	.word	0x08003eb4
 80006d4:	200000d0 	.word	0x200000d0
 80006d8:	08003eb2 	.word	0x08003eb2
 80006dc:	00010100 	.word	0x00010100
 80006e0:	20000170 	.word	0x20000170
 80006e4:	08003e7c 	.word	0x08003e7c
 80006e8:	20000128 	.word	0x20000128
					  //prepare read_buffer with address and constant

					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f2:	48d4      	ldr	r0, [pc, #848]	@ (8000a44 <main+0x4d4>)
 80006f4:	f001 f86a 	bl	80017cc <HAL_GPIO_WritePin>
					  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_READ_STATUS_REG1, 1, 100);
 80006f8:	2364      	movs	r3, #100	@ 0x64
 80006fa:	2201      	movs	r2, #1
 80006fc:	49d2      	ldr	r1, [pc, #840]	@ (8000a48 <main+0x4d8>)
 80006fe:	48d3      	ldr	r0, [pc, #844]	@ (8000a4c <main+0x4dc>)
 8000700:	f001 fdb7 	bl	8002272 <HAL_SPI_Transmit>
					  HAL_SPI_Receive(&hspi3, (uint8_t*)&from_mem, 1, 100);
 8000704:	f107 011d 	add.w	r1, r7, #29
 8000708:	2364      	movs	r3, #100	@ 0x64
 800070a:	2201      	movs	r2, #1
 800070c:	48cf      	ldr	r0, [pc, #828]	@ (8000a4c <main+0x4dc>)
 800070e:	f001 fef3 	bl	80024f8 <HAL_SPI_Receive>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000718:	48ca      	ldr	r0, [pc, #808]	@ (8000a44 <main+0x4d4>)
 800071a:	f001 f857 	bl	80017cc <HAL_GPIO_WritePin>

					  masked_addr = 0x00FFFFFF & addr_read; //qui non dovrebbe servire, ma lo facciamo lo stesso
 800071e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000722:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000726:	67fb      	str	r3, [r7, #124]	@ 0x7c
					  read_buffer = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
					  read_buffer = read_buffer | ((uint32_t) masked_addr) << 8;
 800072c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800072e:	021a      	lsls	r2, r3, #8
 8000730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000732:	4313      	orrs	r3, r2
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
					  read_buffer = read_buffer | ((uint32_t) MEM_READ_DATA);
 8000736:	2303      	movs	r3, #3
 8000738:	461a      	mov	r2, r3
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	4313      	orrs	r3, r2
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
					  spi_buf = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	@ 0x38

					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074a:	48be      	ldr	r0, [pc, #760]	@ (8000a44 <main+0x4d4>)
 800074c:	f001 f83e 	bl	80017cc <HAL_GPIO_WritePin>
					  HAL_SPI_Transmit(&hspi3, (uint8_t *)&read_buffer, 4, 100);
 8000750:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000754:	2364      	movs	r3, #100	@ 0x64
 8000756:	2204      	movs	r2, #4
 8000758:	48bc      	ldr	r0, [pc, #752]	@ (8000a4c <main+0x4dc>)
 800075a:	f001 fd8a 	bl	8002272 <HAL_SPI_Transmit>
					  HAL_SPI_Receive(&hspi3, (uint8_t*)&spi_buf, 4, 100);
 800075e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000762:	2364      	movs	r3, #100	@ 0x64
 8000764:	2204      	movs	r2, #4
 8000766:	48b9      	ldr	r0, [pc, #740]	@ (8000a4c <main+0x4dc>)
 8000768:	f001 fec6 	bl	80024f8 <HAL_SPI_Receive>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000772:	48b4      	ldr	r0, [pc, #720]	@ (8000a44 <main+0x4d4>)
 8000774:	f001 f82a 	bl	80017cc <HAL_GPIO_WritePin>
					  WaitBusyMem();
 8000778:	f000 f98e 	bl	8000a98 <WaitBusyMem>

					  //unchaining data

					  read_light1 = (spi_buf>>24) & 0xFF;
 800077c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800077e:	0e1b      	lsrs	r3, r3, #24
 8000780:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
					  read_dist1 = (spi_buf>>16) & 0xFF;
 8000784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000786:	0c1b      	lsrs	r3, r3, #16
 8000788:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
					  read_light2 = (spi_buf>>8) & 0xFF;
 800078c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
					  read_dist2 = (spi_buf) & 0xFF;
 8000794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000796:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

					  uart_buffer_lenght = sprintf(uart_buffer, "Light: %x; Distance: %x\r\n", (unsigned int)read_light1, (unsigned int)read_dist1);
 800079a:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800079e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80007a2:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80007a6:	49aa      	ldr	r1, [pc, #680]	@ (8000a50 <main+0x4e0>)
 80007a8:	f002 febc 	bl	8003524 <siprintf>
 80007ac:	67b8      	str	r0, [r7, #120]	@ 0x78
					  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buffer, uart_buffer_lenght, 100);
 80007ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	48a6      	ldr	r0, [pc, #664]	@ (8000a54 <main+0x4e4>)
 80007ba:	f002 faf7 	bl	8002dac <HAL_UART_Transmit>
					  uart_buffer_lenght = sprintf(uart_buffer, "Light: %x; Distance: %x\r\n", (unsigned int)read_light2, (unsigned int)read_dist2);
 80007be:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80007c2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80007c6:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80007ca:	49a1      	ldr	r1, [pc, #644]	@ (8000a50 <main+0x4e0>)
 80007cc:	f002 feaa 	bl	8003524 <siprintf>
 80007d0:	67b8      	str	r0, [r7, #120]	@ 0x78
					  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buffer, uart_buffer_lenght, 100);
 80007d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80007da:	2364      	movs	r3, #100	@ 0x64
 80007dc:	489d      	ldr	r0, [pc, #628]	@ (8000a54 <main+0x4e4>)
 80007de:	f002 fae5 	bl	8002dac <HAL_UART_Transmit>

					  addr_read+=256;
 80007e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80007e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80007ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
					  HAL_Delay(10);
 80007ee:	200a      	movs	r0, #10
 80007f0:	f000 fd32 	bl	8001258 <HAL_Delay>
				  for (i = 0; i < data_stored; i++) {
 80007f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80007f8:	3301      	adds	r3, #1
 80007fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80007fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000802:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000806:	429a      	cmp	r2, r3
 8000808:	f6ff af70 	blt.w	80006ec <main+0x17c>

				}
				  pressed = 0;
 800080c:	4a92      	ldr	r2, [pc, #584]	@ (8000a58 <main+0x4e8>)
 800080e:	2300      	movs	r3, #0
 8000810:	7013      	strb	r3, [r2, #0]
			  }

			  //requesting new light measure
			  dataRq=LIGHT_REQUEST;
 8000812:	2354      	movs	r3, #84	@ 0x54
 8000814:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2140      	movs	r1, #64	@ 0x40
 800081c:	488f      	ldr	r0, [pc, #572]	@ (8000a5c <main+0x4ec>)
 800081e:	f000 ffd5 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Transmit(&hspi1, &dataRq, 1, HAL_MAX_DELAY);
 8000822:	f107 0137 	add.w	r1, r7, #55	@ 0x37
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	2201      	movs	r2, #1
 800082c:	488c      	ldr	r0, [pc, #560]	@ (8000a60 <main+0x4f0>)
 800082e:	f001 fd20 	bl	8002272 <HAL_SPI_Transmit>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	@ 0x40
 8000836:	4889      	ldr	r0, [pc, #548]	@ (8000a5c <main+0x4ec>)
 8000838:	f000 ffc8 	bl	80017cc <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2140      	movs	r1, #64	@ 0x40
 8000840:	4886      	ldr	r0, [pc, #536]	@ (8000a5c <main+0x4ec>)
 8000842:	f000 ffc3 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Receive(&hspi1, &new_light1, 1, HAL_MAX_DELAY);
 8000846:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	2201      	movs	r2, #1
 8000850:	4883      	ldr	r0, [pc, #524]	@ (8000a60 <main+0x4f0>)
 8000852:	f001 fe51 	bl	80024f8 <HAL_SPI_Receive>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	@ 0x40
 800085a:	4880      	ldr	r0, [pc, #512]	@ (8000a5c <main+0x4ec>)
 800085c:	f000 ffb6 	bl	80017cc <HAL_GPIO_WritePin>

			  //requesting new dist measure
			  dataRq=DISTANCE_REQUEST;
 8000860:	232a      	movs	r3, #42	@ 0x2a
 8000862:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2140      	movs	r1, #64	@ 0x40
 800086a:	487c      	ldr	r0, [pc, #496]	@ (8000a5c <main+0x4ec>)
 800086c:	f000 ffae 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Transmit(&hspi1, &dataRq, 1, HAL_MAX_DELAY);
 8000870:	f107 0137 	add.w	r1, r7, #55	@ 0x37
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	2201      	movs	r2, #1
 800087a:	4879      	ldr	r0, [pc, #484]	@ (8000a60 <main+0x4f0>)
 800087c:	f001 fcf9 	bl	8002272 <HAL_SPI_Transmit>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2140      	movs	r1, #64	@ 0x40
 8000884:	4875      	ldr	r0, [pc, #468]	@ (8000a5c <main+0x4ec>)
 8000886:	f000 ffa1 	bl	80017cc <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2140      	movs	r1, #64	@ 0x40
 800088e:	4873      	ldr	r0, [pc, #460]	@ (8000a5c <main+0x4ec>)
 8000890:	f000 ff9c 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Receive(&hspi1, &new_dist1, 1, HAL_MAX_DELAY);
 8000894:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2201      	movs	r2, #1
 800089e:	4870      	ldr	r0, [pc, #448]	@ (8000a60 <main+0x4f0>)
 80008a0:	f001 fe2a 	bl	80024f8 <HAL_SPI_Receive>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2140      	movs	r1, #64	@ 0x40
 80008a8:	486c      	ldr	r0, [pc, #432]	@ (8000a5c <main+0x4ec>)
 80008aa:	f000 ff8f 	bl	80017cc <HAL_GPIO_WritePin>

			  HAL_Delay(500);
 80008ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008b2:	f000 fcd1 	bl	8001258 <HAL_Delay>

			  dataRq=LIGHT_REQUEST;
 80008b6:	2354      	movs	r3, #84	@ 0x54
 80008b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2140      	movs	r1, #64	@ 0x40
 80008c0:	4866      	ldr	r0, [pc, #408]	@ (8000a5c <main+0x4ec>)
 80008c2:	f000 ff83 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Transmit(&hspi1, &dataRq, 1, HAL_MAX_DELAY);
 80008c6:	f107 0137 	add.w	r1, r7, #55	@ 0x37
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	2201      	movs	r2, #1
 80008d0:	4863      	ldr	r0, [pc, #396]	@ (8000a60 <main+0x4f0>)
 80008d2:	f001 fcce 	bl	8002272 <HAL_SPI_Transmit>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2140      	movs	r1, #64	@ 0x40
 80008da:	4860      	ldr	r0, [pc, #384]	@ (8000a5c <main+0x4ec>)
 80008dc:	f000 ff76 	bl	80017cc <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	485d      	ldr	r0, [pc, #372]	@ (8000a5c <main+0x4ec>)
 80008e6:	f000 ff71 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Receive(&hspi1, &new_light2, 1, HAL_MAX_DELAY);
 80008ea:	f107 0120 	add.w	r1, r7, #32
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	2201      	movs	r2, #1
 80008f4:	485a      	ldr	r0, [pc, #360]	@ (8000a60 <main+0x4f0>)
 80008f6:	f001 fdff 	bl	80024f8 <HAL_SPI_Receive>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	@ 0x40
 80008fe:	4857      	ldr	r0, [pc, #348]	@ (8000a5c <main+0x4ec>)
 8000900:	f000 ff64 	bl	80017cc <HAL_GPIO_WritePin>

			  //requesting new dist measure
			  dataRq=DISTANCE_REQUEST;
 8000904:	232a      	movs	r3, #42	@ 0x2a
 8000906:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2140      	movs	r1, #64	@ 0x40
 800090e:	4853      	ldr	r0, [pc, #332]	@ (8000a5c <main+0x4ec>)
 8000910:	f000 ff5c 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Transmit(&hspi1, &dataRq, 1, HAL_MAX_DELAY);
 8000914:	f107 0137 	add.w	r1, r7, #55	@ 0x37
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	2201      	movs	r2, #1
 800091e:	4850      	ldr	r0, [pc, #320]	@ (8000a60 <main+0x4f0>)
 8000920:	f001 fca7 	bl	8002272 <HAL_SPI_Transmit>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	@ 0x40
 8000928:	484c      	ldr	r0, [pc, #304]	@ (8000a5c <main+0x4ec>)
 800092a:	f000 ff4f 	bl	80017cc <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2140      	movs	r1, #64	@ 0x40
 8000932:	484a      	ldr	r0, [pc, #296]	@ (8000a5c <main+0x4ec>)
 8000934:	f000 ff4a 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Receive(&hspi1, &new_dist2, 1, HAL_MAX_DELAY);
 8000938:	f107 0121 	add.w	r1, r7, #33	@ 0x21
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	2201      	movs	r2, #1
 8000942:	4847      	ldr	r0, [pc, #284]	@ (8000a60 <main+0x4f0>)
 8000944:	f001 fdd8 	bl	80024f8 <HAL_SPI_Receive>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2140      	movs	r1, #64	@ 0x40
 800094c:	4843      	ldr	r0, [pc, #268]	@ (8000a5c <main+0x4ec>)
 800094e:	f000 ff3d 	bl	80017cc <HAL_GPIO_WritePin>


			  //chaining data into a 32 bits var
			  data_buffer = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	673b      	str	r3, [r7, #112]	@ 0x70
			  data_buffer = data_buffer | ((uint32_t)new_light1) << 24;
 8000956:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800095a:	061b      	lsls	r3, r3, #24
 800095c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800095e:	4313      	orrs	r3, r2
 8000960:	673b      	str	r3, [r7, #112]	@ 0x70
			  data_buffer = data_buffer | ((uint32_t)new_dist1) << 16;
 8000962:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000966:	041b      	lsls	r3, r3, #16
 8000968:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800096a:	4313      	orrs	r3, r2
 800096c:	673b      	str	r3, [r7, #112]	@ 0x70
			  data_buffer = data_buffer | ((uint32_t)new_light2) << 8;
 800096e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000976:	4313      	orrs	r3, r2
 8000978:	673b      	str	r3, [r7, #112]	@ 0x70
			  data_buffer = data_buffer | ((uint32_t)new_dist2);
 800097a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800097e:	461a      	mov	r2, r3
 8000980:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000982:	4313      	orrs	r3, r2
 8000984:	673b      	str	r3, [r7, #112]	@ 0x70

			  //writing data to memory
			  //						8 bits        24 bits   32 bits
			  //creating data block: MEM_PAGE_WRITE + address + data

			  masked_addr = 0x00FFFFFF & addr;
 8000986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800098a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800098e:	67fb      	str	r3, [r7, #124]	@ 0x7c
			  write_buffer = 0;
 8000990:	f04f 0200 	mov.w	r2, #0
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			  write_buffer = ((uint64_t) data_buffer) << 32;
 800099c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800099e:	2200      	movs	r2, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	617a      	str	r2, [r7, #20]
 80009a4:	f04f 0200 	mov.w	r2, #0
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	6939      	ldr	r1, [r7, #16]
 80009ae:	000b      	movs	r3, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			  write_buffer = write_buffer | ((uint64_t) masked_addr) << 8;
 80009b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80009b8:	2200      	movs	r2, #0
 80009ba:	469a      	mov	sl, r3
 80009bc:	4693      	mov	fp, r2
 80009be:	ea4f 651a 	mov.w	r5, sl, lsr #24
 80009c2:	ea4f 240a 	mov.w	r4, sl, lsl #8
 80009c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80009ca:	ea44 0102 	orr.w	r1, r4, r2
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	432b      	orrs	r3, r5
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80009d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			  write_buffer = write_buffer | ((uint64_t) MEM_PAGE_WRITE);
 80009dc:	2302      	movs	r3, #2
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2200      	movs	r2, #0
 80009e2:	4698      	mov	r8, r3
 80009e4:	4691      	mov	r9, r2
 80009e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80009ea:	ea48 0102 	orr.w	r1, r8, r2
 80009ee:	6039      	str	r1, [r7, #0]
 80009f0:	ea49 0303 	orr.w	r3, r9, r3
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

			  //send write enable
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a04:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <main+0x4d4>)
 8000a06:	f000 fee1 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_WRITE_ENABLE, 1, 100); //should return HAL_OK
 8000a0a:	2364      	movs	r3, #100	@ 0x64
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4915      	ldr	r1, [pc, #84]	@ (8000a64 <main+0x4f4>)
 8000a10:	480e      	ldr	r0, [pc, #56]	@ (8000a4c <main+0x4dc>)
 8000a12:	f001 fc2e 	bl	8002272 <HAL_SPI_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a1c:	4809      	ldr	r0, [pc, #36]	@ (8000a44 <main+0x4d4>)
 8000a1e:	f000 fed5 	bl	80017cc <HAL_GPIO_WritePin>

			  //send data
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a28:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <main+0x4d4>)
 8000a2a:	f000 fecf 	bl	80017cc <HAL_GPIO_WritePin>
			  HAL_SPI_Transmit(&hspi3, (uint8_t *)&write_buffer, 8, 100);
 8000a2e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000a32:	2364      	movs	r3, #100	@ 0x64
 8000a34:	2208      	movs	r2, #8
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <main+0x4dc>)
 8000a38:	f001 fc1b 	bl	8002272 <HAL_SPI_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a42:	e011      	b.n	8000a68 <main+0x4f8>
 8000a44:	40020000 	.word	0x40020000
 8000a48:	08003eb3 	.word	0x08003eb3
 8000a4c:	200000d0 	.word	0x200000d0
 8000a50:	08003e98 	.word	0x08003e98
 8000a54:	20000128 	.word	0x20000128
 8000a58:	20000170 	.word	0x20000170
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	20000078 	.word	0x20000078
 8000a64:	08003eb2 	.word	0x08003eb2
 8000a68:	480a      	ldr	r0, [pc, #40]	@ (8000a94 <main+0x524>)
 8000a6a:	f000 feaf 	bl	80017cc <HAL_GPIO_WritePin>

			  WaitBusyMem();
 8000a6e:	f000 f813 	bl	8000a98 <WaitBusyMem>
//			  HAL_SPI_Receive(&hspi3, (uint8_t*)&spi_buf, 4, 100);
//			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//
//			  //update address

			  data_stored++;
 8000a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a76:	3301      	adds	r3, #1
 8000a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			  addr+=256;
 8000a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a80:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			  HAL_Delay(500);	// procede con un nuovo ciclo ogni 200 ms
 8000a88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a8c:	f000 fbe4 	bl	8001258 <HAL_Delay>
		 if(pressed == 1){		//PRESSED BLUEBUTTON
 8000a90:	e5fe      	b.n	8000690 <main+0x120>
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000

08000a98 <WaitBusyMem>:
    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

void WaitBusyMem(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	uint8_t  from_mem;
	do{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aa4:	4810      	ldr	r0, [pc, #64]	@ (8000ae8 <WaitBusyMem+0x50>)
 8000aa6:	f000 fe91 	bl	80017cc <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_READ_STATUS_REG1, 1, 100);
 8000aaa:	2364      	movs	r3, #100	@ 0x64
 8000aac:	2201      	movs	r2, #1
 8000aae:	490f      	ldr	r1, [pc, #60]	@ (8000aec <WaitBusyMem+0x54>)
 8000ab0:	480f      	ldr	r0, [pc, #60]	@ (8000af0 <WaitBusyMem+0x58>)
 8000ab2:	f001 fbde 	bl	8002272 <HAL_SPI_Transmit>
		  HAL_SPI_Receive(&hspi3, (uint8_t*)&from_mem, 1, 100);
 8000ab6:	1df9      	adds	r1, r7, #7
 8000ab8:	2364      	movs	r3, #100	@ 0x64
 8000aba:	2201      	movs	r2, #1
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <WaitBusyMem+0x58>)
 8000abe:	f001 fd1b 	bl	80024f8 <HAL_SPI_Receive>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ac8:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <WaitBusyMem+0x50>)
 8000aca:	f000 fe7f 	bl	80017cc <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000ace:	2005      	movs	r0, #5
 8000ad0:	f000 fbc2 	bl	8001258 <HAL_Delay>
	  }while((from_mem & 0x01) != 0); //busy is the rightmost bit of status reg
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1df      	bne.n	8000a9e <WaitBusyMem+0x6>

	return;
 8000ade:	bf00      	nop
}
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	08003eb3 	.word	0x08003eb3
 8000af0:	200000d0 	.word	0x200000d0

08000af4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_13 ) {
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b04:	d102      	bne.n	8000b0c <HAL_GPIO_EXTI_Callback+0x18>
		pressed = 1;
 8000b06:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	20000170 	.word	0x20000170

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	@ 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	2230      	movs	r2, #48	@ 0x30
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 fd1a 	bl	8003564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b28      	ldr	r3, [pc, #160]	@ (8000be8 <SystemClock_Config+0xcc>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	4a27      	ldr	r2, [pc, #156]	@ (8000be8 <SystemClock_Config+0xcc>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <SystemClock_Config+0xcc>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <SystemClock_Config+0xd0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <SystemClock_Config+0xd0>)
 8000b66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <SystemClock_Config+0xd0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b80:	2310      	movs	r3, #16
 8000b82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b90:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b96:	2304      	movs	r3, #4
 8000b98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0320 	add.w	r3, r7, #32
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fe44 	bl	8001830 <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bae:	f000 f943 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f8a6 	bl	8001d20 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bda:	f000 f92d 	bl	8000e38 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3750      	adds	r7, #80	@ 0x50
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000bf6:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <MX_SPI1_Init+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000bfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c24:	2228      	movs	r2, #40	@ 0x28
 8000c26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c3c:	220a      	movs	r2, #10
 8000c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c42:	f001 fa8d 	bl	8002160 <HAL_SPI_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c4c:	f000 f8f4 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000078 	.word	0x20000078
 8000c58:	40013000 	.word	0x40013000

08000c5c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c62:	4a18      	ldr	r2, [pc, #96]	@ (8000cc4 <MX_SPI3_Init+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c8c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c90:	2228      	movs	r2, #40	@ 0x28
 8000c92:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000ca8:	220a      	movs	r2, #10
 8000caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <MX_SPI3_Init+0x64>)
 8000cae:	f001 fa57 	bl	8002160 <HAL_SPI_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000cb8:	f000 f8be 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000d0 	.word	0x200000d0
 8000cc4:	40003c00 	.word	0x40003c00

08000cc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <MX_USART2_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f002 f804 	bl	8002d0c <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f000 f895 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000128 	.word	0x20000128
 8000d18:	40004400 	.word	0x40004400

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b3c      	ldr	r3, [pc, #240]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b39      	ldr	r3, [pc, #228]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a34      	ldr	r2, [pc, #208]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a2d      	ldr	r2, [pc, #180]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <MX_GPIO_Init+0x10c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da8:	4820      	ldr	r0, [pc, #128]	@ (8000e2c <MX_GPIO_Init+0x110>)
 8000daa:	f000 fd0f 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2140      	movs	r1, #64	@ 0x40
 8000db2:	481f      	ldr	r0, [pc, #124]	@ (8000e30 <MX_GPIO_Init+0x114>)
 8000db4:	f000 fd0a 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 8000db8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4819      	ldr	r0, [pc, #100]	@ (8000e34 <MX_GPIO_Init+0x118>)
 8000dd0:	f000 fb78 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	480f      	ldr	r0, [pc, #60]	@ (8000e2c <MX_GPIO_Init+0x110>)
 8000dee:	f000 fb69 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df2:	2340      	movs	r3, #64	@ 0x40
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <MX_GPIO_Init+0x114>)
 8000e0a:	f000 fb5b 	bl	80014c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2028      	movs	r0, #40	@ 0x28
 8000e14:	f000 fb1f 	bl	8001456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e18:	2028      	movs	r0, #40	@ 0x28
 8000e1a:	f000 fb38 	bl	800148e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020800 	.word	0x40020800

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x8>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <HAL_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	4a0f      	ldr	r2, [pc, #60]	@ (8000e90 <HAL_MspInit+0x4c>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <HAL_MspInit+0x4c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e82:	2007      	movs	r0, #7
 8000e84:	f000 fadc 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800

08000e94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	@ 0x30
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a32      	ldr	r2, [pc, #200]	@ (8000f7c <HAL_SPI_MspInit+0xe8>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12c      	bne.n	8000f10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	4a30      	ldr	r2, [pc, #192]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000ec0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a29      	ldr	r2, [pc, #164]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eee:	23e0      	movs	r3, #224	@ 0xe0
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efe:	2305      	movs	r3, #5
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	481e      	ldr	r0, [pc, #120]	@ (8000f84 <HAL_SPI_MspInit+0xf0>)
 8000f0a:	f000 fadb 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f0e:	e030      	b.n	8000f72 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1c      	ldr	r2, [pc, #112]	@ (8000f88 <HAL_SPI_MspInit+0xf4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12b      	bne.n	8000f72 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	4a17      	ldr	r2, [pc, #92]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_SPI_MspInit+0xec>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f52:	2338      	movs	r3, #56	@ 0x38
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f62:	2306      	movs	r3, #6
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <HAL_SPI_MspInit+0xf8>)
 8000f6e:	f000 faa9 	bl	80014c4 <HAL_GPIO_Init>
}
 8000f72:	bf00      	nop
 8000f74:	3730      	adds	r7, #48	@ 0x30
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40013000 	.word	0x40013000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40003c00 	.word	0x40003c00
 8000f8c:	40020400 	.word	0x40020400

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a19      	ldr	r2, [pc, #100]	@ (8001014 <HAL_UART_MspInit+0x84>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d12b      	bne.n	800100a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <HAL_UART_MspInit+0x88>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a17      	ldr	r2, [pc, #92]	@ (8001018 <HAL_UART_MspInit+0x88>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <HAL_UART_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <HAL_UART_MspInit+0x88>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fea:	230c      	movs	r3, #12
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <HAL_UART_MspInit+0x8c>)
 8001006:	f000 fa5d 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	@ 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004400 	.word	0x40004400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <NMI_Handler+0x4>

08001028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <MemManage_Handler+0x4>

08001038 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <UsageFault_Handler+0x4>

08001048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001076:	f000 f8cf 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}

0800107e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BlueButton_Pin);
 8001082:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001086:	f000 fbbb 	bl	8001800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	@ (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f002 fa58 	bl	8003574 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20020000 	.word	0x20020000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000174 	.word	0x20000174
 80010f8:	200002c8 	.word	0x200002c8

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	@ (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001158 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001124:	f7ff ffea 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	@ (8001160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	@ (800116c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f002 fa17 	bl	8003580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fa0d 	bl	8000570 <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001164:	08003f14 	.word	0x08003f14
  ldr r2, =_sbss
 8001168:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800116c:	200002c4 	.word	0x200002c4

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	@ (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f94f 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fe4c 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f967 	bl	80014aa <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f92f 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	@ (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	20000178 	.word	0x20000178

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000178 	.word	0x20000178

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	@ (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	@ (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	@ (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	@ 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	@ (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	e159      	b.n	8001794 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8148 	bne.w	800178e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d005      	beq.n	8001516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001512:	2b02      	cmp	r3, #2
 8001514:	d130      	bne.n	8001578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154c:	2201      	movs	r2, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 0201 	and.w	r2, r3, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b03      	cmp	r3, #3
 8001582:	d017      	beq.n	80015b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d123      	bne.n	8001608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0203 	and.w	r2, r3, #3
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a2 	beq.w	800178e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b57      	ldr	r3, [pc, #348]	@ (80017ac <HAL_GPIO_Init+0x2e8>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	4a56      	ldr	r2, [pc, #344]	@ (80017ac <HAL_GPIO_Init+0x2e8>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001658:	6453      	str	r3, [r2, #68]	@ 0x44
 800165a:	4b54      	ldr	r3, [pc, #336]	@ (80017ac <HAL_GPIO_Init+0x2e8>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001666:	4a52      	ldr	r2, [pc, #328]	@ (80017b0 <HAL_GPIO_Init+0x2ec>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a49      	ldr	r2, [pc, #292]	@ (80017b4 <HAL_GPIO_Init+0x2f0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_Init+0x202>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a48      	ldr	r2, [pc, #288]	@ (80017b8 <HAL_GPIO_Init+0x2f4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0x1fe>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a47      	ldr	r2, [pc, #284]	@ (80017bc <HAL_GPIO_Init+0x2f8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_GPIO_Init+0x1fa>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a46      	ldr	r2, [pc, #280]	@ (80017c0 <HAL_GPIO_Init+0x2fc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_Init+0x1f6>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a45      	ldr	r2, [pc, #276]	@ (80017c4 <HAL_GPIO_Init+0x300>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_GPIO_Init+0x1f2>
 80016b2:	2304      	movs	r3, #4
 80016b4:	e008      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016ba:	2303      	movs	r3, #3
 80016bc:	e004      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016be:	2302      	movs	r3, #2
 80016c0:	e002      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016c6:	2300      	movs	r3, #0
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	f002 0203 	and.w	r2, r2, #3
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	4093      	lsls	r3, r2
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d8:	4935      	ldr	r1, [pc, #212]	@ (80017b0 <HAL_GPIO_Init+0x2ec>)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016e6:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <HAL_GPIO_Init+0x304>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800170a:	4a2f      	ldr	r2, [pc, #188]	@ (80017c8 <HAL_GPIO_Init+0x304>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001710:	4b2d      	ldr	r3, [pc, #180]	@ (80017c8 <HAL_GPIO_Init+0x304>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001734:	4a24      	ldr	r2, [pc, #144]	@ (80017c8 <HAL_GPIO_Init+0x304>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173a:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <HAL_GPIO_Init+0x304>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800175e:	4a1a      	ldr	r2, [pc, #104]	@ (80017c8 <HAL_GPIO_Init+0x304>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <HAL_GPIO_Init+0x304>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001788:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <HAL_GPIO_Init+0x304>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3301      	adds	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2b0f      	cmp	r3, #15
 8001798:	f67f aea2 	bls.w	80014e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3724      	adds	r7, #36	@ 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40013800 	.word	0x40013800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40013c00 	.word	0x40013c00

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
 80017d8:	4613      	mov	r3, r2
 80017da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017dc:	787b      	ldrb	r3, [r7, #1]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e8:	e003      	b.n	80017f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	619a      	str	r2, [r3, #24]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f968 	bl	8000af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e267      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d075      	beq.n	800193a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800184e:	4b88      	ldr	r3, [pc, #544]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d00c      	beq.n	8001874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185a:	4b85      	ldr	r3, [pc, #532]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001862:	2b08      	cmp	r3, #8
 8001864:	d112      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001866:	4b82      	ldr	r3, [pc, #520]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001872:	d10b      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	4b7e      	ldr	r3, [pc, #504]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05b      	beq.n	8001938 <HAL_RCC_OscConfig+0x108>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d157      	bne.n	8001938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e242      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x74>
 8001896:	4b76      	ldr	r3, [pc, #472]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a75      	ldr	r2, [pc, #468]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x98>
 80018ae:	4b70      	ldr	r3, [pc, #448]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6c      	ldr	r2, [pc, #432]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018c8:	4b69      	ldr	r3, [pc, #420]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a68      	ldr	r2, [pc, #416]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b66      	ldr	r3, [pc, #408]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a65      	ldr	r2, [pc, #404]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fcaa 	bl	8001240 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff fca6 	bl	8001240 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	@ 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e207      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b5b      	ldr	r3, [pc, #364]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xc0>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fc96 	bl	8001240 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fc92 	bl	8001240 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	@ 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1f3      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	4b51      	ldr	r3, [pc, #324]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0xe8>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d063      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001946:	4b4a      	ldr	r3, [pc, #296]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001952:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195a:	2b08      	cmp	r3, #8
 800195c:	d11c      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b44      	ldr	r3, [pc, #272]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d116      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	4b41      	ldr	r3, [pc, #260]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e1c7      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4937      	ldr	r1, [pc, #220]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	e03a      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a0:	4b34      	ldr	r3, [pc, #208]	@ (8001a74 <HAL_RCC_OscConfig+0x244>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff fc4b 	bl	8001240 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fc47 	bl	8001240 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1a8      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b28      	ldr	r3, [pc, #160]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4925      	ldr	r1, [pc, #148]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b24      	ldr	r3, [pc, #144]	@ (8001a74 <HAL_RCC_OscConfig+0x244>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fc2a 	bl	8001240 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff fc26 	bl	8001240 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e187      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d036      	beq.n	8001a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d016      	beq.n	8001a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_RCC_OscConfig+0x248>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff fc0a 	bl	8001240 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fc06 	bl	8001240 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e167      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x200>
 8001a4e:	e01b      	b.n	8001a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a50:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_OscConfig+0x248>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fbf3 	bl	8001240 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	e00e      	b.n	8001a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fbef 	bl	8001240 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d907      	bls.n	8001a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e150      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
 8001a70:	40023800 	.word	0x40023800
 8001a74:	42470000 	.word	0x42470000
 8001a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b88      	ldr	r3, [pc, #544]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ea      	bne.n	8001a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8097 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b81      	ldr	r3, [pc, #516]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	4a7c      	ldr	r2, [pc, #496]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b77      	ldr	r3, [pc, #476]	@ (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad2:	4b74      	ldr	r3, [pc, #464]	@ (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a73      	ldr	r2, [pc, #460]	@ (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fbaf 	bl	8001240 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff fbab 	bl	8001240 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e10c      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
 8001b0c:	4b64      	ldr	r3, [pc, #400]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b10:	4a63      	ldr	r2, [pc, #396]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x324>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x30c>
 8001b22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b26:	4a5e      	ldr	r2, [pc, #376]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b32:	4a5b      	ldr	r2, [pc, #364]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0x324>
 8001b3c:	4b58      	ldr	r3, [pc, #352]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b40:	4a57      	ldr	r2, [pc, #348]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b48:	4b55      	ldr	r3, [pc, #340]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4c:	4a54      	ldr	r2, [pc, #336]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	f023 0304 	bic.w	r3, r3, #4
 8001b52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d015      	beq.n	8001b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fb70 	bl	8001240 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7ff fb6c 	bl	8001240 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0cb      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	4b49      	ldr	r3, [pc, #292]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0ee      	beq.n	8001b64 <HAL_RCC_OscConfig+0x334>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff fb5a 	bl	8001240 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff fb56 	bl	8001240 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0b5      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ee      	bne.n	8001b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb8:	4b39      	ldr	r3, [pc, #228]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	4a38      	ldr	r2, [pc, #224]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a1 	beq.w	8001d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bce:	4b34      	ldr	r3, [pc, #208]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d05c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d141      	bne.n	8001c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb2a 	bl	8001240 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff fb26 	bl	8001240 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e087      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	3b01      	subs	r3, #1
 8001c28:	041b      	lsls	r3, r3, #16
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	491b      	ldr	r1, [pc, #108]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff faff 	bl	8001240 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff fafb 	bl	8001240 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e05c      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x416>
 8001c64:	e054      	b.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fae8 	bl	8001240 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff fae4 	bl	8001240 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e045      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x444>
 8001c92:	e03d      	b.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e038      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <HAL_RCC_OscConfig+0x4ec>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d028      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d121      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d11a      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d111      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0cc      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b68      	ldr	r3, [pc, #416]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d90c      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b65      	ldr	r3, [pc, #404]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b63      	ldr	r3, [pc, #396]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d74:	4b59      	ldr	r3, [pc, #356]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a58      	ldr	r2, [pc, #352]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a52      	ldr	r2, [pc, #328]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b50      	ldr	r3, [pc, #320]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	494d      	ldr	r1, [pc, #308]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d044      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d119      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e07f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dde:	4b3f      	ldr	r3, [pc, #252]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b3b      	ldr	r3, [pc, #236]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e067      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b37      	ldr	r3, [pc, #220]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4934      	ldr	r1, [pc, #208]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e10:	f7ff fa16 	bl	8001240 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7ff fa12 	bl	8001240 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e04f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d20c      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e032      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4916      	ldr	r1, [pc, #88]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e92:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	490e      	ldr	r1, [pc, #56]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea6:	f000 f821 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	490a      	ldr	r1, [pc, #40]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	5ccb      	ldrb	r3, [r1, r3]
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	4a09      	ldr	r2, [pc, #36]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f976 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023c00 	.word	0x40023c00
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08003eb8 	.word	0x08003eb8
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef0:	b094      	sub	sp, #80	@ 0x50
 8001ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ef8:	2300      	movs	r3, #0
 8001efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001efc:	2300      	movs	r3, #0
 8001efe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f04:	4b79      	ldr	r3, [pc, #484]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d00d      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x40>
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	f200 80e1 	bhi.w	80020d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x34>
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f1e:	e0db      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4b73      	ldr	r3, [pc, #460]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f22:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001f24:	e0db      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f26:	4b73      	ldr	r3, [pc, #460]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f2a:	e0d8      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f34:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f36:	4b6d      	ldr	r3, [pc, #436]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f42:	4b6a      	ldr	r3, [pc, #424]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	099b      	lsrs	r3, r3, #6
 8001f48:	2200      	movs	r2, #0
 8001f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f56:	2300      	movs	r3, #0
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f5e:	4622      	mov	r2, r4
 8001f60:	462b      	mov	r3, r5
 8001f62:	f04f 0000 	mov.w	r0, #0
 8001f66:	f04f 0100 	mov.w	r1, #0
 8001f6a:	0159      	lsls	r1, r3, #5
 8001f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f70:	0150      	lsls	r0, r2, #5
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4621      	mov	r1, r4
 8001f78:	1a51      	subs	r1, r2, r1
 8001f7a:	6139      	str	r1, [r7, #16]
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f90:	4659      	mov	r1, fp
 8001f92:	018b      	lsls	r3, r1, #6
 8001f94:	4651      	mov	r1, sl
 8001f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f9a:	4651      	mov	r1, sl
 8001f9c:	018a      	lsls	r2, r1, #6
 8001f9e:	4651      	mov	r1, sl
 8001fa0:	ebb2 0801 	subs.w	r8, r2, r1
 8001fa4:	4659      	mov	r1, fp
 8001fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fbe:	4690      	mov	r8, r2
 8001fc0:	4699      	mov	r9, r3
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	eb18 0303 	adds.w	r3, r8, r3
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	462b      	mov	r3, r5
 8001fcc:	eb49 0303 	adc.w	r3, r9, r3
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fde:	4629      	mov	r1, r5
 8001fe0:	024b      	lsls	r3, r1, #9
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fe8:	4621      	mov	r1, r4
 8001fea:	024a      	lsls	r2, r1, #9
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ffc:	f7fe f940 	bl	8000280 <__aeabi_uldivmod>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4613      	mov	r3, r2
 8002006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002008:	e058      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	2200      	movs	r2, #0
 8002012:	4618      	mov	r0, r3
 8002014:	4611      	mov	r1, r2
 8002016:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800201a:	623b      	str	r3, [r7, #32]
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002020:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002024:	4642      	mov	r2, r8
 8002026:	464b      	mov	r3, r9
 8002028:	f04f 0000 	mov.w	r0, #0
 800202c:	f04f 0100 	mov.w	r1, #0
 8002030:	0159      	lsls	r1, r3, #5
 8002032:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002036:	0150      	lsls	r0, r2, #5
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4641      	mov	r1, r8
 800203e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002042:	4649      	mov	r1, r9
 8002044:	eb63 0b01 	sbc.w	fp, r3, r1
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800205c:	ebb2 040a 	subs.w	r4, r2, sl
 8002060:	eb63 050b 	sbc.w	r5, r3, fp
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	00eb      	lsls	r3, r5, #3
 800206e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002072:	00e2      	lsls	r2, r4, #3
 8002074:	4614      	mov	r4, r2
 8002076:	461d      	mov	r5, r3
 8002078:	4643      	mov	r3, r8
 800207a:	18e3      	adds	r3, r4, r3
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	464b      	mov	r3, r9
 8002080:	eb45 0303 	adc.w	r3, r5, r3
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002092:	4629      	mov	r1, r5
 8002094:	028b      	lsls	r3, r1, #10
 8002096:	4621      	mov	r1, r4
 8002098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800209c:	4621      	mov	r1, r4
 800209e:	028a      	lsls	r2, r1, #10
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a6:	2200      	movs	r2, #0
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	61fa      	str	r2, [r7, #28]
 80020ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b0:	f7fe f8e6 	bl	8000280 <__aeabi_uldivmod>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4613      	mov	r3, r2
 80020ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	3301      	adds	r3, #1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80020cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3750      	adds	r7, #80	@ 0x50
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	00f42400 	.word	0x00f42400
 80020f4:	007a1200 	.word	0x007a1200

080020f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_RCC_GetHCLKFreq+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000000 	.word	0x20000000

08002110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002114:	f7ff fff0 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0a9b      	lsrs	r3, r3, #10
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4903      	ldr	r1, [pc, #12]	@ (8002134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	08003ec8 	.word	0x08003ec8

08002138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800213c:	f7ff ffdc 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0b5b      	lsrs	r3, r3, #13
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4903      	ldr	r1, [pc, #12]	@ (800215c <HAL_RCC_GetPCLK2Freq+0x24>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	08003ec8 	.word	0x08003ec8

08002160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e07b      	b.n	800226a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002182:	d009      	beq.n	8002198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
 800218a:	e005      	b.n	8002198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fe6e 	bl	8000e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221c:	ea42 0103 	orr.w	r1, r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	f003 0104 	and.w	r1, r3, #4
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	f003 0210 	and.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002258:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b088      	sub	sp, #32
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_SPI_Transmit+0x22>
 8002290:	2302      	movs	r3, #2
 8002292:	e12d      	b.n	80024f0 <HAL_SPI_Transmit+0x27e>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800229c:	f7fe ffd0 	bl	8001240 <HAL_GetTick>
 80022a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d002      	beq.n	80022b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
 80022b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022b6:	e116      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_SPI_Transmit+0x52>
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022c8:	e10d      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2203      	movs	r2, #3
 80022ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	88fa      	ldrh	r2, [r7, #6]
 80022e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002310:	d10f      	bne.n	8002332 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233c:	2b40      	cmp	r3, #64	@ 0x40
 800233e:	d007      	beq.n	8002350 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800234e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002358:	d14f      	bne.n	80023fa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_SPI_Transmit+0xf6>
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d142      	bne.n	80023ee <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	881a      	ldrh	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	1c9a      	adds	r2, r3, #2
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800238c:	e02f      	b.n	80023ee <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b02      	cmp	r3, #2
 800239a:	d112      	bne.n	80023c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	881a      	ldrh	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	1c9a      	adds	r2, r3, #2
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023c0:	e015      	b.n	80023ee <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023c2:	f7fe ff3d 	bl	8001240 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d803      	bhi.n	80023da <HAL_SPI_Transmit+0x168>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d102      	bne.n	80023e0 <HAL_SPI_Transmit+0x16e>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80023ec:	e07b      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ca      	bne.n	800238e <HAL_SPI_Transmit+0x11c>
 80023f8:	e050      	b.n	800249c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_SPI_Transmit+0x196>
 8002402:	8afb      	ldrh	r3, [r7, #22]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d144      	bne.n	8002492 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800242e:	e030      	b.n	8002492 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d113      	bne.n	8002466 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	330c      	adds	r3, #12
 8002448:	7812      	ldrb	r2, [r2, #0]
 800244a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002464:	e015      	b.n	8002492 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002466:	f7fe feeb 	bl	8001240 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d803      	bhi.n	800247e <HAL_SPI_Transmit+0x20c>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d102      	bne.n	8002484 <HAL_SPI_Transmit+0x212>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002490:	e029      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1c9      	bne.n	8002430 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fbdf 	bl	8002c64 <SPI_EndRxTxTransaction>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	77fb      	strb	r3, [r7, #31]
 80024dc:	e003      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80024ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d002      	beq.n	800251e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002518:	2302      	movs	r3, #2
 800251a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800251c:	e0fb      	b.n	8002716 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002526:	d112      	bne.n	800254e <HAL_SPI_Receive+0x56>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10e      	bne.n	800254e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2204      	movs	r2, #4
 8002534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f8ef 	bl	8002728 <HAL_SPI_TransmitReceive>
 800254a:	4603      	mov	r3, r0
 800254c:	e0e8      	b.n	8002720 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_SPI_Receive+0x64>
 8002558:	2302      	movs	r3, #2
 800255a:	e0e1      	b.n	8002720 <HAL_SPI_Receive+0x228>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002564:	f7fe fe6c 	bl	8001240 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_SPI_Receive+0x7e>
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    goto error;
 800257a:	e0cc      	b.n	8002716 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2204      	movs	r2, #4
 8002580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	88fa      	ldrh	r2, [r7, #6]
 8002594:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	88fa      	ldrh	r2, [r7, #6]
 800259a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025c2:	d10f      	bne.n	80025e4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ee:	2b40      	cmp	r3, #64	@ 0x40
 80025f0:	d007      	beq.n	8002602 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d16a      	bne.n	80026e0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800260a:	e032      	b.n	8002672 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d115      	bne.n	8002646 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f103 020c 	add.w	r2, r3, #12
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002644:	e015      	b.n	8002672 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002646:	f7fe fdfb 	bl	8001240 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d803      	bhi.n	800265e <HAL_SPI_Receive+0x166>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d102      	bne.n	8002664 <HAL_SPI_Receive+0x16c>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d106      	bne.n	8002672 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002670:	e051      	b.n	8002716 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1c7      	bne.n	800260c <HAL_SPI_Receive+0x114>
 800267c:	e035      	b.n	80026ea <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d113      	bne.n	80026b4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002696:	b292      	uxth	r2, r2
 8002698:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026b2:	e015      	b.n	80026e0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026b4:	f7fe fdc4 	bl	8001240 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d803      	bhi.n	80026cc <HAL_SPI_Receive+0x1d4>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ca:	d102      	bne.n	80026d2 <HAL_SPI_Receive+0x1da>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80026de:	e01a      	b.n	8002716 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1c9      	bne.n	800267e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fa52 	bl	8002b98 <SPI_EndRxTransaction>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	75fb      	strb	r3, [r7, #23]
 800270c:	e003      	b.n	8002716 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	@ 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002736:	2301      	movs	r3, #1
 8002738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_SPI_TransmitReceive+0x26>
 800274a:	2302      	movs	r3, #2
 800274c:	e198      	b.n	8002a80 <HAL_SPI_TransmitReceive+0x358>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002756:	f7fe fd73 	bl	8001240 <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002770:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002774:	2b01      	cmp	r3, #1
 8002776:	d00f      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x70>
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800277e:	d107      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x68>
 8002788:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800278c:	2b04      	cmp	r3, #4
 800278e:	d003      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002796:	e16d      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_SPI_TransmitReceive+0x82>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_TransmitReceive+0x82>
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80027b0:	e160      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d003      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2205      	movs	r2, #5
 80027c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	887a      	ldrh	r2, [r7, #2]
 80027d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	887a      	ldrh	r2, [r7, #2]
 80027ee:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002806:	2b40      	cmp	r3, #64	@ 0x40
 8002808:	d007      	beq.n	800281a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002822:	d17c      	bne.n	800291e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <HAL_SPI_TransmitReceive+0x10a>
 800282c:	8b7b      	ldrh	r3, [r7, #26]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d16a      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	1c9a      	adds	r2, r3, #2
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002856:	e057      	b.n	8002908 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d11b      	bne.n	800289e <HAL_SPI_TransmitReceive+0x176>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d016      	beq.n	800289e <HAL_SPI_TransmitReceive+0x176>
 8002870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d113      	bne.n	800289e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	1c9a      	adds	r2, r3, #2
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d119      	bne.n	80028e0 <HAL_SPI_TransmitReceive+0x1b8>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c0:	b292      	uxth	r2, r2
 80028c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c8:	1c9a      	adds	r2, r3, #2
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028dc:	2301      	movs	r3, #1
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028e0:	f7fe fcae 	bl	8001240 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d80b      	bhi.n	8002908 <HAL_SPI_TransmitReceive+0x1e0>
 80028f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d007      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002906:	e0b5      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1a2      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x130>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d19d      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x130>
 800291c:	e080      	b.n	8002a20 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_SPI_TransmitReceive+0x204>
 8002926:	8b7b      	ldrh	r3, [r7, #26]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d16f      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	7812      	ldrb	r2, [r2, #0]
 8002938:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002952:	e05b      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	d11c      	bne.n	800299c <HAL_SPI_TransmitReceive+0x274>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d017      	beq.n	800299c <HAL_SPI_TransmitReceive+0x274>
 800296c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296e:	2b01      	cmp	r3, #1
 8002970:	d114      	bne.n	800299c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d119      	bne.n	80029de <HAL_SPI_TransmitReceive+0x2b6>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d014      	beq.n	80029de <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029da:	2301      	movs	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029de:	f7fe fc2f 	bl	8001240 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d803      	bhi.n	80029f6 <HAL_SPI_TransmitReceive+0x2ce>
 80029ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d102      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x2d4>
 80029f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002a0a:	e033      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d19e      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x22c>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d199      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f91d 	bl	8002c64 <SPI_EndRxTxTransaction>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002a3c:	e01a      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a6a:	e003      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002a7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3730      	adds	r7, #48	@ 0x30
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a98:	f7fe fbd2 	bl	8001240 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002aa8:	f7fe fbca 	bl	8001240 <HAL_GetTick>
 8002aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002aae:	4b39      	ldr	r3, [pc, #228]	@ (8002b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	015b      	lsls	r3, r3, #5
 8002ab4:	0d1b      	lsrs	r3, r3, #20
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002abe:	e054      	b.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac6:	d050      	beq.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ac8:	f7fe fbba 	bl	8001240 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d902      	bls.n	8002ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d13d      	bne.n	8002b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002af6:	d111      	bne.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b00:	d004      	beq.n	8002b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0a:	d107      	bne.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b24:	d10f      	bne.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e017      	b.n	8002b8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d19b      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000

08002b98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bac:	d111      	bne.n	8002bd2 <SPI_EndRxTransaction+0x3a>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb6:	d004      	beq.n	8002bc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc0:	d107      	bne.n	8002bd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bda:	d12a      	bne.n	8002c32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be4:	d012      	beq.n	8002c0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	@ 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff ff49 	bl	8002a88 <SPI_WaitFlagStateUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d02d      	beq.n	8002c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e026      	b.n	8002c5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2200      	movs	r2, #0
 8002c14:	2101      	movs	r1, #1
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff ff36 	bl	8002a88 <SPI_WaitFlagStateUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01a      	beq.n	8002c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e013      	b.n	8002c5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff ff23 	bl	8002a88 <SPI_WaitFlagStateUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e000      	b.n	8002c5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2201      	movs	r2, #1
 8002c78:	2102      	movs	r1, #2
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff ff04 	bl	8002a88 <SPI_WaitFlagStateUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8a:	f043 0220 	orr.w	r2, r3, #32
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e032      	b.n	8002cfc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c96:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <SPI_EndRxTxTransaction+0xa0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002d08 <SPI_EndRxTxTransaction+0xa4>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	0d5b      	lsrs	r3, r3, #21
 8002ca2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cb4:	d112      	bne.n	8002cdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2180      	movs	r1, #128	@ 0x80
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff fee1 	bl	8002a88 <SPI_WaitFlagStateUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d016      	beq.n	8002cfa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e00f      	b.n	8002cfc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf2:	2b80      	cmp	r3, #128	@ 0x80
 8002cf4:	d0f2      	beq.n	8002cdc <SPI_EndRxTxTransaction+0x78>
 8002cf6:	e000      	b.n	8002cfa <SPI_EndRxTxTransaction+0x96>
        break;
 8002cf8:	bf00      	nop
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000000 	.word	0x20000000
 8002d08:	165e9f81 	.word	0x165e9f81

08002d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e042      	b.n	8002da4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe f92c 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	@ 0x24
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f973 	bl	800303c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	@ 0x28
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d175      	bne.n	8002eb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_UART_Transmit+0x2c>
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e06e      	b.n	8002eba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2221      	movs	r2, #33	@ 0x21
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dea:	f7fe fa29 	bl	8001240 <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	88fa      	ldrh	r2, [r7, #6]
 8002dfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e04:	d108      	bne.n	8002e18 <HAL_UART_Transmit+0x6c>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	e003      	b.n	8002e20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e20:	e02e      	b.n	8002e80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2180      	movs	r1, #128	@ 0x80
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f848 	bl	8002ec2 <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e03a      	b.n	8002eba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	e007      	b.n	8002e72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1cb      	bne.n	8002e22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	@ 0x40
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f814 	bl	8002ec2 <UART_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e006      	b.n	8002eba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e000      	b.n	8002eba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
  }
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed2:	e03b      	b.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eda:	d037      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002edc:	f7fe f9b0 	bl	8001240 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	6a3a      	ldr	r2, [r7, #32]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d302      	bcc.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e03a      	b.n	8002f6c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d023      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b80      	cmp	r3, #128	@ 0x80
 8002f08:	d020      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b40      	cmp	r3, #64	@ 0x40
 8002f0e:	d01d      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d116      	bne.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f81d 	bl	8002f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e00f      	b.n	8002f6c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d0b4      	beq.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b095      	sub	sp, #84	@ 0x54
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	330c      	adds	r3, #12
 8002f9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fa4:	e841 2300 	strex	r3, r2, [r1]
 8002fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e5      	bne.n	8002f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3314      	adds	r3, #20
 8002fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3314      	adds	r3, #20
 8002fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e5      	bne.n	8002fb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d119      	bne.n	8003020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f023 0310 	bic.w	r3, r3, #16
 8003002:	647b      	str	r3, [r7, #68]	@ 0x44
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800300c:	61ba      	str	r2, [r7, #24]
 800300e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	6979      	ldr	r1, [r7, #20]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	613b      	str	r3, [r7, #16]
   return(result);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e5      	bne.n	8002fec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800302e:	bf00      	nop
 8003030:	3754      	adds	r7, #84	@ 0x54
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800303c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003040:	b0c0      	sub	sp, #256	@ 0x100
 8003042:	af00      	add	r7, sp, #0
 8003044:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	ea40 0301 	orr.w	r3, r0, r1
 8003064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	431a      	orrs	r2, r3
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	431a      	orrs	r2, r3
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003094:	f021 010c 	bic.w	r1, r1, #12
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030a2:	430b      	orrs	r3, r1
 80030a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b6:	6999      	ldr	r1, [r3, #24]
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	ea40 0301 	orr.w	r3, r0, r1
 80030c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b8f      	ldr	r3, [pc, #572]	@ (8003308 <UART_SetConfig+0x2cc>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d005      	beq.n	80030dc <UART_SetConfig+0xa0>
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b8d      	ldr	r3, [pc, #564]	@ (800330c <UART_SetConfig+0x2d0>)
 80030d8:	429a      	cmp	r2, r3
 80030da:	d104      	bne.n	80030e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7ff f82c 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 80030e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030e4:	e003      	b.n	80030ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030e6:	f7ff f813 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 80030ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f8:	f040 810c 	bne.w	8003314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003100:	2200      	movs	r2, #0
 8003102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003106:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800310a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800310e:	4622      	mov	r2, r4
 8003110:	462b      	mov	r3, r5
 8003112:	1891      	adds	r1, r2, r2
 8003114:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003116:	415b      	adcs	r3, r3
 8003118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800311a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800311e:	4621      	mov	r1, r4
 8003120:	eb12 0801 	adds.w	r8, r2, r1
 8003124:	4629      	mov	r1, r5
 8003126:	eb43 0901 	adc.w	r9, r3, r1
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800313a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313e:	4690      	mov	r8, r2
 8003140:	4699      	mov	r9, r3
 8003142:	4623      	mov	r3, r4
 8003144:	eb18 0303 	adds.w	r3, r8, r3
 8003148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800314c:	462b      	mov	r3, r5
 800314e:	eb49 0303 	adc.w	r3, r9, r3
 8003152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003162:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800316a:	460b      	mov	r3, r1
 800316c:	18db      	adds	r3, r3, r3
 800316e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003170:	4613      	mov	r3, r2
 8003172:	eb42 0303 	adc.w	r3, r2, r3
 8003176:	657b      	str	r3, [r7, #84]	@ 0x54
 8003178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800317c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003180:	f7fd f87e 	bl	8000280 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b61      	ldr	r3, [pc, #388]	@ (8003310 <UART_SetConfig+0x2d4>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011c      	lsls	r4, r3, #4
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800319c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031a4:	4642      	mov	r2, r8
 80031a6:	464b      	mov	r3, r9
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031ac:	415b      	adcs	r3, r3
 80031ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031b4:	4641      	mov	r1, r8
 80031b6:	eb12 0a01 	adds.w	sl, r2, r1
 80031ba:	4649      	mov	r1, r9
 80031bc:	eb43 0b01 	adc.w	fp, r3, r1
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031d4:	4692      	mov	sl, r2
 80031d6:	469b      	mov	fp, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	eb1a 0303 	adds.w	r3, sl, r3
 80031de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031e2:	464b      	mov	r3, r9
 80031e4:	eb4b 0303 	adc.w	r3, fp, r3
 80031e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003200:	460b      	mov	r3, r1
 8003202:	18db      	adds	r3, r3, r3
 8003204:	643b      	str	r3, [r7, #64]	@ 0x40
 8003206:	4613      	mov	r3, r2
 8003208:	eb42 0303 	adc.w	r3, r2, r3
 800320c:	647b      	str	r3, [r7, #68]	@ 0x44
 800320e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003216:	f7fd f833 	bl	8000280 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4611      	mov	r1, r2
 8003220:	4b3b      	ldr	r3, [pc, #236]	@ (8003310 <UART_SetConfig+0x2d4>)
 8003222:	fba3 2301 	umull	r2, r3, r3, r1
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2264      	movs	r2, #100	@ 0x64
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	1acb      	subs	r3, r1, r3
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003236:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <UART_SetConfig+0x2d4>)
 8003238:	fba3 2302 	umull	r2, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003244:	441c      	add	r4, r3
 8003246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003250:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003260:	415b      	adcs	r3, r3
 8003262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003268:	4641      	mov	r1, r8
 800326a:	1851      	adds	r1, r2, r1
 800326c:	6339      	str	r1, [r7, #48]	@ 0x30
 800326e:	4649      	mov	r1, r9
 8003270:	414b      	adcs	r3, r1
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003280:	4659      	mov	r1, fp
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328a:	4651      	mov	r1, sl
 800328c:	00ca      	lsls	r2, r1, #3
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4642      	mov	r2, r8
 8003296:	189b      	adds	r3, r3, r2
 8003298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800329c:	464b      	mov	r3, r9
 800329e:	460a      	mov	r2, r1
 80032a0:	eb42 0303 	adc.w	r3, r2, r3
 80032a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032bc:	460b      	mov	r3, r1
 80032be:	18db      	adds	r3, r3, r3
 80032c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032c2:	4613      	mov	r3, r2
 80032c4:	eb42 0303 	adc.w	r3, r2, r3
 80032c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032d2:	f7fc ffd5 	bl	8000280 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <UART_SetConfig+0x2d4>)
 80032dc:	fba3 1302 	umull	r1, r3, r3, r2
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	2164      	movs	r1, #100	@ 0x64
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3332      	adds	r3, #50	@ 0x32
 80032ee:	4a08      	ldr	r2, [pc, #32]	@ (8003310 <UART_SetConfig+0x2d4>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	f003 0207 	and.w	r2, r3, #7
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4422      	add	r2, r4
 8003302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003304:	e106      	b.n	8003514 <UART_SetConfig+0x4d8>
 8003306:	bf00      	nop
 8003308:	40011000 	.word	0x40011000
 800330c:	40011400 	.word	0x40011400
 8003310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800331e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003326:	4642      	mov	r2, r8
 8003328:	464b      	mov	r3, r9
 800332a:	1891      	adds	r1, r2, r2
 800332c:	6239      	str	r1, [r7, #32]
 800332e:	415b      	adcs	r3, r3
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
 8003332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003336:	4641      	mov	r1, r8
 8003338:	1854      	adds	r4, r2, r1
 800333a:	4649      	mov	r1, r9
 800333c:	eb43 0501 	adc.w	r5, r3, r1
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	00eb      	lsls	r3, r5, #3
 800334a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800334e:	00e2      	lsls	r2, r4, #3
 8003350:	4614      	mov	r4, r2
 8003352:	461d      	mov	r5, r3
 8003354:	4643      	mov	r3, r8
 8003356:	18e3      	adds	r3, r4, r3
 8003358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800335c:	464b      	mov	r3, r9
 800335e:	eb45 0303 	adc.w	r3, r5, r3
 8003362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003372:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003382:	4629      	mov	r1, r5
 8003384:	008b      	lsls	r3, r1, #2
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800338c:	4621      	mov	r1, r4
 800338e:	008a      	lsls	r2, r1, #2
 8003390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003394:	f7fc ff74 	bl	8000280 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4b60      	ldr	r3, [pc, #384]	@ (8003520 <UART_SetConfig+0x4e4>)
 800339e:	fba3 2302 	umull	r2, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	011c      	lsls	r4, r3, #4
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	1891      	adds	r1, r2, r2
 80033be:	61b9      	str	r1, [r7, #24]
 80033c0:	415b      	adcs	r3, r3
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c8:	4641      	mov	r1, r8
 80033ca:	1851      	adds	r1, r2, r1
 80033cc:	6139      	str	r1, [r7, #16]
 80033ce:	4649      	mov	r1, r9
 80033d0:	414b      	adcs	r3, r1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e0:	4659      	mov	r1, fp
 80033e2:	00cb      	lsls	r3, r1, #3
 80033e4:	4651      	mov	r1, sl
 80033e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ea:	4651      	mov	r1, sl
 80033ec:	00ca      	lsls	r2, r1, #3
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	4642      	mov	r2, r8
 80033f6:	189b      	adds	r3, r3, r2
 80033f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033fc:	464b      	mov	r3, r9
 80033fe:	460a      	mov	r2, r1
 8003400:	eb42 0303 	adc.w	r3, r2, r3
 8003404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003412:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003420:	4649      	mov	r1, r9
 8003422:	008b      	lsls	r3, r1, #2
 8003424:	4641      	mov	r1, r8
 8003426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342a:	4641      	mov	r1, r8
 800342c:	008a      	lsls	r2, r1, #2
 800342e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003432:	f7fc ff25 	bl	8000280 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4611      	mov	r1, r2
 800343c:	4b38      	ldr	r3, [pc, #224]	@ (8003520 <UART_SetConfig+0x4e4>)
 800343e:	fba3 2301 	umull	r2, r3, r3, r1
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2264      	movs	r2, #100	@ 0x64
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	1acb      	subs	r3, r1, r3
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	3332      	adds	r3, #50	@ 0x32
 8003450:	4a33      	ldr	r2, [pc, #204]	@ (8003520 <UART_SetConfig+0x4e4>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800345c:	441c      	add	r4, r3
 800345e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003462:	2200      	movs	r2, #0
 8003464:	673b      	str	r3, [r7, #112]	@ 0x70
 8003466:	677a      	str	r2, [r7, #116]	@ 0x74
 8003468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	415b      	adcs	r3, r3
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800347c:	4641      	mov	r1, r8
 800347e:	1851      	adds	r1, r2, r1
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	4649      	mov	r1, r9
 8003484:	414b      	adcs	r3, r1
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003494:	4659      	mov	r1, fp
 8003496:	00cb      	lsls	r3, r1, #3
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349e:	4651      	mov	r1, sl
 80034a0:	00ca      	lsls	r2, r1, #3
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	4642      	mov	r2, r8
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034ae:	464b      	mov	r3, r9
 80034b0:	460a      	mov	r2, r1
 80034b2:	eb42 0303 	adc.w	r3, r2, r3
 80034b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80034c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034d0:	4649      	mov	r1, r9
 80034d2:	008b      	lsls	r3, r1, #2
 80034d4:	4641      	mov	r1, r8
 80034d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034da:	4641      	mov	r1, r8
 80034dc:	008a      	lsls	r2, r1, #2
 80034de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034e2:	f7fc fecd 	bl	8000280 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003520 <UART_SetConfig+0x4e4>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	@ 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	3332      	adds	r3, #50	@ 0x32
 80034fe:	4a08      	ldr	r2, [pc, #32]	@ (8003520 <UART_SetConfig+0x4e4>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4422      	add	r2, r4
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800351a:	46bd      	mov	sp, r7
 800351c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003520:	51eb851f 	.word	0x51eb851f

08003524 <siprintf>:
 8003524:	b40e      	push	{r1, r2, r3}
 8003526:	b500      	push	{lr}
 8003528:	b09c      	sub	sp, #112	@ 0x70
 800352a:	ab1d      	add	r3, sp, #116	@ 0x74
 800352c:	9002      	str	r0, [sp, #8]
 800352e:	9006      	str	r0, [sp, #24]
 8003530:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003534:	4809      	ldr	r0, [pc, #36]	@ (800355c <siprintf+0x38>)
 8003536:	9107      	str	r1, [sp, #28]
 8003538:	9104      	str	r1, [sp, #16]
 800353a:	4909      	ldr	r1, [pc, #36]	@ (8003560 <siprintf+0x3c>)
 800353c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003540:	9105      	str	r1, [sp, #20]
 8003542:	6800      	ldr	r0, [r0, #0]
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	a902      	add	r1, sp, #8
 8003548:	f000 f994 	bl	8003874 <_svfiprintf_r>
 800354c:	9b02      	ldr	r3, [sp, #8]
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	b01c      	add	sp, #112	@ 0x70
 8003554:	f85d eb04 	ldr.w	lr, [sp], #4
 8003558:	b003      	add	sp, #12
 800355a:	4770      	bx	lr
 800355c:	2000000c 	.word	0x2000000c
 8003560:	ffff0208 	.word	0xffff0208

08003564 <memset>:
 8003564:	4402      	add	r2, r0
 8003566:	4603      	mov	r3, r0
 8003568:	4293      	cmp	r3, r2
 800356a:	d100      	bne.n	800356e <memset+0xa>
 800356c:	4770      	bx	lr
 800356e:	f803 1b01 	strb.w	r1, [r3], #1
 8003572:	e7f9      	b.n	8003568 <memset+0x4>

08003574 <__errno>:
 8003574:	4b01      	ldr	r3, [pc, #4]	@ (800357c <__errno+0x8>)
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	2000000c 	.word	0x2000000c

08003580 <__libc_init_array>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	4d0d      	ldr	r5, [pc, #52]	@ (80035b8 <__libc_init_array+0x38>)
 8003584:	4c0d      	ldr	r4, [pc, #52]	@ (80035bc <__libc_init_array+0x3c>)
 8003586:	1b64      	subs	r4, r4, r5
 8003588:	10a4      	asrs	r4, r4, #2
 800358a:	2600      	movs	r6, #0
 800358c:	42a6      	cmp	r6, r4
 800358e:	d109      	bne.n	80035a4 <__libc_init_array+0x24>
 8003590:	4d0b      	ldr	r5, [pc, #44]	@ (80035c0 <__libc_init_array+0x40>)
 8003592:	4c0c      	ldr	r4, [pc, #48]	@ (80035c4 <__libc_init_array+0x44>)
 8003594:	f000 fc66 	bl	8003e64 <_init>
 8003598:	1b64      	subs	r4, r4, r5
 800359a:	10a4      	asrs	r4, r4, #2
 800359c:	2600      	movs	r6, #0
 800359e:	42a6      	cmp	r6, r4
 80035a0:	d105      	bne.n	80035ae <__libc_init_array+0x2e>
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a8:	4798      	blx	r3
 80035aa:	3601      	adds	r6, #1
 80035ac:	e7ee      	b.n	800358c <__libc_init_array+0xc>
 80035ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b2:	4798      	blx	r3
 80035b4:	3601      	adds	r6, #1
 80035b6:	e7f2      	b.n	800359e <__libc_init_array+0x1e>
 80035b8:	08003f0c 	.word	0x08003f0c
 80035bc:	08003f0c 	.word	0x08003f0c
 80035c0:	08003f0c 	.word	0x08003f0c
 80035c4:	08003f10 	.word	0x08003f10

080035c8 <__retarget_lock_acquire_recursive>:
 80035c8:	4770      	bx	lr

080035ca <__retarget_lock_release_recursive>:
 80035ca:	4770      	bx	lr

080035cc <_free_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	4605      	mov	r5, r0
 80035d0:	2900      	cmp	r1, #0
 80035d2:	d041      	beq.n	8003658 <_free_r+0x8c>
 80035d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d8:	1f0c      	subs	r4, r1, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bfb8      	it	lt
 80035de:	18e4      	addlt	r4, r4, r3
 80035e0:	f000 f8e0 	bl	80037a4 <__malloc_lock>
 80035e4:	4a1d      	ldr	r2, [pc, #116]	@ (800365c <_free_r+0x90>)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	b933      	cbnz	r3, 80035f8 <_free_r+0x2c>
 80035ea:	6063      	str	r3, [r4, #4]
 80035ec:	6014      	str	r4, [r2, #0]
 80035ee:	4628      	mov	r0, r5
 80035f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f4:	f000 b8dc 	b.w	80037b0 <__malloc_unlock>
 80035f8:	42a3      	cmp	r3, r4
 80035fa:	d908      	bls.n	800360e <_free_r+0x42>
 80035fc:	6820      	ldr	r0, [r4, #0]
 80035fe:	1821      	adds	r1, r4, r0
 8003600:	428b      	cmp	r3, r1
 8003602:	bf01      	itttt	eq
 8003604:	6819      	ldreq	r1, [r3, #0]
 8003606:	685b      	ldreq	r3, [r3, #4]
 8003608:	1809      	addeq	r1, r1, r0
 800360a:	6021      	streq	r1, [r4, #0]
 800360c:	e7ed      	b.n	80035ea <_free_r+0x1e>
 800360e:	461a      	mov	r2, r3
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	b10b      	cbz	r3, 8003618 <_free_r+0x4c>
 8003614:	42a3      	cmp	r3, r4
 8003616:	d9fa      	bls.n	800360e <_free_r+0x42>
 8003618:	6811      	ldr	r1, [r2, #0]
 800361a:	1850      	adds	r0, r2, r1
 800361c:	42a0      	cmp	r0, r4
 800361e:	d10b      	bne.n	8003638 <_free_r+0x6c>
 8003620:	6820      	ldr	r0, [r4, #0]
 8003622:	4401      	add	r1, r0
 8003624:	1850      	adds	r0, r2, r1
 8003626:	4283      	cmp	r3, r0
 8003628:	6011      	str	r1, [r2, #0]
 800362a:	d1e0      	bne.n	80035ee <_free_r+0x22>
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	6053      	str	r3, [r2, #4]
 8003632:	4408      	add	r0, r1
 8003634:	6010      	str	r0, [r2, #0]
 8003636:	e7da      	b.n	80035ee <_free_r+0x22>
 8003638:	d902      	bls.n	8003640 <_free_r+0x74>
 800363a:	230c      	movs	r3, #12
 800363c:	602b      	str	r3, [r5, #0]
 800363e:	e7d6      	b.n	80035ee <_free_r+0x22>
 8003640:	6820      	ldr	r0, [r4, #0]
 8003642:	1821      	adds	r1, r4, r0
 8003644:	428b      	cmp	r3, r1
 8003646:	bf04      	itt	eq
 8003648:	6819      	ldreq	r1, [r3, #0]
 800364a:	685b      	ldreq	r3, [r3, #4]
 800364c:	6063      	str	r3, [r4, #4]
 800364e:	bf04      	itt	eq
 8003650:	1809      	addeq	r1, r1, r0
 8003652:	6021      	streq	r1, [r4, #0]
 8003654:	6054      	str	r4, [r2, #4]
 8003656:	e7ca      	b.n	80035ee <_free_r+0x22>
 8003658:	bd38      	pop	{r3, r4, r5, pc}
 800365a:	bf00      	nop
 800365c:	200002c0 	.word	0x200002c0

08003660 <sbrk_aligned>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	4e0f      	ldr	r6, [pc, #60]	@ (80036a0 <sbrk_aligned+0x40>)
 8003664:	460c      	mov	r4, r1
 8003666:	6831      	ldr	r1, [r6, #0]
 8003668:	4605      	mov	r5, r0
 800366a:	b911      	cbnz	r1, 8003672 <sbrk_aligned+0x12>
 800366c:	f000 fba6 	bl	8003dbc <_sbrk_r>
 8003670:	6030      	str	r0, [r6, #0]
 8003672:	4621      	mov	r1, r4
 8003674:	4628      	mov	r0, r5
 8003676:	f000 fba1 	bl	8003dbc <_sbrk_r>
 800367a:	1c43      	adds	r3, r0, #1
 800367c:	d103      	bne.n	8003686 <sbrk_aligned+0x26>
 800367e:	f04f 34ff 	mov.w	r4, #4294967295
 8003682:	4620      	mov	r0, r4
 8003684:	bd70      	pop	{r4, r5, r6, pc}
 8003686:	1cc4      	adds	r4, r0, #3
 8003688:	f024 0403 	bic.w	r4, r4, #3
 800368c:	42a0      	cmp	r0, r4
 800368e:	d0f8      	beq.n	8003682 <sbrk_aligned+0x22>
 8003690:	1a21      	subs	r1, r4, r0
 8003692:	4628      	mov	r0, r5
 8003694:	f000 fb92 	bl	8003dbc <_sbrk_r>
 8003698:	3001      	adds	r0, #1
 800369a:	d1f2      	bne.n	8003682 <sbrk_aligned+0x22>
 800369c:	e7ef      	b.n	800367e <sbrk_aligned+0x1e>
 800369e:	bf00      	nop
 80036a0:	200002bc 	.word	0x200002bc

080036a4 <_malloc_r>:
 80036a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a8:	1ccd      	adds	r5, r1, #3
 80036aa:	f025 0503 	bic.w	r5, r5, #3
 80036ae:	3508      	adds	r5, #8
 80036b0:	2d0c      	cmp	r5, #12
 80036b2:	bf38      	it	cc
 80036b4:	250c      	movcc	r5, #12
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	4606      	mov	r6, r0
 80036ba:	db01      	blt.n	80036c0 <_malloc_r+0x1c>
 80036bc:	42a9      	cmp	r1, r5
 80036be:	d904      	bls.n	80036ca <_malloc_r+0x26>
 80036c0:	230c      	movs	r3, #12
 80036c2:	6033      	str	r3, [r6, #0]
 80036c4:	2000      	movs	r0, #0
 80036c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037a0 <_malloc_r+0xfc>
 80036ce:	f000 f869 	bl	80037a4 <__malloc_lock>
 80036d2:	f8d8 3000 	ldr.w	r3, [r8]
 80036d6:	461c      	mov	r4, r3
 80036d8:	bb44      	cbnz	r4, 800372c <_malloc_r+0x88>
 80036da:	4629      	mov	r1, r5
 80036dc:	4630      	mov	r0, r6
 80036de:	f7ff ffbf 	bl	8003660 <sbrk_aligned>
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	4604      	mov	r4, r0
 80036e6:	d158      	bne.n	800379a <_malloc_r+0xf6>
 80036e8:	f8d8 4000 	ldr.w	r4, [r8]
 80036ec:	4627      	mov	r7, r4
 80036ee:	2f00      	cmp	r7, #0
 80036f0:	d143      	bne.n	800377a <_malloc_r+0xd6>
 80036f2:	2c00      	cmp	r4, #0
 80036f4:	d04b      	beq.n	800378e <_malloc_r+0xea>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	4639      	mov	r1, r7
 80036fa:	4630      	mov	r0, r6
 80036fc:	eb04 0903 	add.w	r9, r4, r3
 8003700:	f000 fb5c 	bl	8003dbc <_sbrk_r>
 8003704:	4581      	cmp	r9, r0
 8003706:	d142      	bne.n	800378e <_malloc_r+0xea>
 8003708:	6821      	ldr	r1, [r4, #0]
 800370a:	1a6d      	subs	r5, r5, r1
 800370c:	4629      	mov	r1, r5
 800370e:	4630      	mov	r0, r6
 8003710:	f7ff ffa6 	bl	8003660 <sbrk_aligned>
 8003714:	3001      	adds	r0, #1
 8003716:	d03a      	beq.n	800378e <_malloc_r+0xea>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	442b      	add	r3, r5
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	f8d8 3000 	ldr.w	r3, [r8]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	bb62      	cbnz	r2, 8003780 <_malloc_r+0xdc>
 8003726:	f8c8 7000 	str.w	r7, [r8]
 800372a:	e00f      	b.n	800374c <_malloc_r+0xa8>
 800372c:	6822      	ldr	r2, [r4, #0]
 800372e:	1b52      	subs	r2, r2, r5
 8003730:	d420      	bmi.n	8003774 <_malloc_r+0xd0>
 8003732:	2a0b      	cmp	r2, #11
 8003734:	d917      	bls.n	8003766 <_malloc_r+0xc2>
 8003736:	1961      	adds	r1, r4, r5
 8003738:	42a3      	cmp	r3, r4
 800373a:	6025      	str	r5, [r4, #0]
 800373c:	bf18      	it	ne
 800373e:	6059      	strne	r1, [r3, #4]
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	bf08      	it	eq
 8003744:	f8c8 1000 	streq.w	r1, [r8]
 8003748:	5162      	str	r2, [r4, r5]
 800374a:	604b      	str	r3, [r1, #4]
 800374c:	4630      	mov	r0, r6
 800374e:	f000 f82f 	bl	80037b0 <__malloc_unlock>
 8003752:	f104 000b 	add.w	r0, r4, #11
 8003756:	1d23      	adds	r3, r4, #4
 8003758:	f020 0007 	bic.w	r0, r0, #7
 800375c:	1ac2      	subs	r2, r0, r3
 800375e:	bf1c      	itt	ne
 8003760:	1a1b      	subne	r3, r3, r0
 8003762:	50a3      	strne	r3, [r4, r2]
 8003764:	e7af      	b.n	80036c6 <_malloc_r+0x22>
 8003766:	6862      	ldr	r2, [r4, #4]
 8003768:	42a3      	cmp	r3, r4
 800376a:	bf0c      	ite	eq
 800376c:	f8c8 2000 	streq.w	r2, [r8]
 8003770:	605a      	strne	r2, [r3, #4]
 8003772:	e7eb      	b.n	800374c <_malloc_r+0xa8>
 8003774:	4623      	mov	r3, r4
 8003776:	6864      	ldr	r4, [r4, #4]
 8003778:	e7ae      	b.n	80036d8 <_malloc_r+0x34>
 800377a:	463c      	mov	r4, r7
 800377c:	687f      	ldr	r7, [r7, #4]
 800377e:	e7b6      	b.n	80036ee <_malloc_r+0x4a>
 8003780:	461a      	mov	r2, r3
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	42a3      	cmp	r3, r4
 8003786:	d1fb      	bne.n	8003780 <_malloc_r+0xdc>
 8003788:	2300      	movs	r3, #0
 800378a:	6053      	str	r3, [r2, #4]
 800378c:	e7de      	b.n	800374c <_malloc_r+0xa8>
 800378e:	230c      	movs	r3, #12
 8003790:	6033      	str	r3, [r6, #0]
 8003792:	4630      	mov	r0, r6
 8003794:	f000 f80c 	bl	80037b0 <__malloc_unlock>
 8003798:	e794      	b.n	80036c4 <_malloc_r+0x20>
 800379a:	6005      	str	r5, [r0, #0]
 800379c:	e7d6      	b.n	800374c <_malloc_r+0xa8>
 800379e:	bf00      	nop
 80037a0:	200002c0 	.word	0x200002c0

080037a4 <__malloc_lock>:
 80037a4:	4801      	ldr	r0, [pc, #4]	@ (80037ac <__malloc_lock+0x8>)
 80037a6:	f7ff bf0f 	b.w	80035c8 <__retarget_lock_acquire_recursive>
 80037aa:	bf00      	nop
 80037ac:	200002b8 	.word	0x200002b8

080037b0 <__malloc_unlock>:
 80037b0:	4801      	ldr	r0, [pc, #4]	@ (80037b8 <__malloc_unlock+0x8>)
 80037b2:	f7ff bf0a 	b.w	80035ca <__retarget_lock_release_recursive>
 80037b6:	bf00      	nop
 80037b8:	200002b8 	.word	0x200002b8

080037bc <__ssputs_r>:
 80037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	688e      	ldr	r6, [r1, #8]
 80037c2:	461f      	mov	r7, r3
 80037c4:	42be      	cmp	r6, r7
 80037c6:	680b      	ldr	r3, [r1, #0]
 80037c8:	4682      	mov	sl, r0
 80037ca:	460c      	mov	r4, r1
 80037cc:	4690      	mov	r8, r2
 80037ce:	d82d      	bhi.n	800382c <__ssputs_r+0x70>
 80037d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80037d8:	d026      	beq.n	8003828 <__ssputs_r+0x6c>
 80037da:	6965      	ldr	r5, [r4, #20]
 80037dc:	6909      	ldr	r1, [r1, #16]
 80037de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037e2:	eba3 0901 	sub.w	r9, r3, r1
 80037e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037ea:	1c7b      	adds	r3, r7, #1
 80037ec:	444b      	add	r3, r9
 80037ee:	106d      	asrs	r5, r5, #1
 80037f0:	429d      	cmp	r5, r3
 80037f2:	bf38      	it	cc
 80037f4:	461d      	movcc	r5, r3
 80037f6:	0553      	lsls	r3, r2, #21
 80037f8:	d527      	bpl.n	800384a <__ssputs_r+0x8e>
 80037fa:	4629      	mov	r1, r5
 80037fc:	f7ff ff52 	bl	80036a4 <_malloc_r>
 8003800:	4606      	mov	r6, r0
 8003802:	b360      	cbz	r0, 800385e <__ssputs_r+0xa2>
 8003804:	6921      	ldr	r1, [r4, #16]
 8003806:	464a      	mov	r2, r9
 8003808:	f000 fae8 	bl	8003ddc <memcpy>
 800380c:	89a3      	ldrh	r3, [r4, #12]
 800380e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003816:	81a3      	strh	r3, [r4, #12]
 8003818:	6126      	str	r6, [r4, #16]
 800381a:	6165      	str	r5, [r4, #20]
 800381c:	444e      	add	r6, r9
 800381e:	eba5 0509 	sub.w	r5, r5, r9
 8003822:	6026      	str	r6, [r4, #0]
 8003824:	60a5      	str	r5, [r4, #8]
 8003826:	463e      	mov	r6, r7
 8003828:	42be      	cmp	r6, r7
 800382a:	d900      	bls.n	800382e <__ssputs_r+0x72>
 800382c:	463e      	mov	r6, r7
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	4632      	mov	r2, r6
 8003832:	4641      	mov	r1, r8
 8003834:	f000 faa8 	bl	8003d88 <memmove>
 8003838:	68a3      	ldr	r3, [r4, #8]
 800383a:	1b9b      	subs	r3, r3, r6
 800383c:	60a3      	str	r3, [r4, #8]
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	4433      	add	r3, r6
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	2000      	movs	r0, #0
 8003846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800384a:	462a      	mov	r2, r5
 800384c:	f000 fad4 	bl	8003df8 <_realloc_r>
 8003850:	4606      	mov	r6, r0
 8003852:	2800      	cmp	r0, #0
 8003854:	d1e0      	bne.n	8003818 <__ssputs_r+0x5c>
 8003856:	6921      	ldr	r1, [r4, #16]
 8003858:	4650      	mov	r0, sl
 800385a:	f7ff feb7 	bl	80035cc <_free_r>
 800385e:	230c      	movs	r3, #12
 8003860:	f8ca 3000 	str.w	r3, [sl]
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	e7e9      	b.n	8003846 <__ssputs_r+0x8a>
	...

08003874 <_svfiprintf_r>:
 8003874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003878:	4698      	mov	r8, r3
 800387a:	898b      	ldrh	r3, [r1, #12]
 800387c:	061b      	lsls	r3, r3, #24
 800387e:	b09d      	sub	sp, #116	@ 0x74
 8003880:	4607      	mov	r7, r0
 8003882:	460d      	mov	r5, r1
 8003884:	4614      	mov	r4, r2
 8003886:	d510      	bpl.n	80038aa <_svfiprintf_r+0x36>
 8003888:	690b      	ldr	r3, [r1, #16]
 800388a:	b973      	cbnz	r3, 80038aa <_svfiprintf_r+0x36>
 800388c:	2140      	movs	r1, #64	@ 0x40
 800388e:	f7ff ff09 	bl	80036a4 <_malloc_r>
 8003892:	6028      	str	r0, [r5, #0]
 8003894:	6128      	str	r0, [r5, #16]
 8003896:	b930      	cbnz	r0, 80038a6 <_svfiprintf_r+0x32>
 8003898:	230c      	movs	r3, #12
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	b01d      	add	sp, #116	@ 0x74
 80038a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a6:	2340      	movs	r3, #64	@ 0x40
 80038a8:	616b      	str	r3, [r5, #20]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80038ae:	2320      	movs	r3, #32
 80038b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80038b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80038b8:	2330      	movs	r3, #48	@ 0x30
 80038ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003a58 <_svfiprintf_r+0x1e4>
 80038be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80038c2:	f04f 0901 	mov.w	r9, #1
 80038c6:	4623      	mov	r3, r4
 80038c8:	469a      	mov	sl, r3
 80038ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038ce:	b10a      	cbz	r2, 80038d4 <_svfiprintf_r+0x60>
 80038d0:	2a25      	cmp	r2, #37	@ 0x25
 80038d2:	d1f9      	bne.n	80038c8 <_svfiprintf_r+0x54>
 80038d4:	ebba 0b04 	subs.w	fp, sl, r4
 80038d8:	d00b      	beq.n	80038f2 <_svfiprintf_r+0x7e>
 80038da:	465b      	mov	r3, fp
 80038dc:	4622      	mov	r2, r4
 80038de:	4629      	mov	r1, r5
 80038e0:	4638      	mov	r0, r7
 80038e2:	f7ff ff6b 	bl	80037bc <__ssputs_r>
 80038e6:	3001      	adds	r0, #1
 80038e8:	f000 80a7 	beq.w	8003a3a <_svfiprintf_r+0x1c6>
 80038ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038ee:	445a      	add	r2, fp
 80038f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80038f2:	f89a 3000 	ldrb.w	r3, [sl]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 809f 	beq.w	8003a3a <_svfiprintf_r+0x1c6>
 80038fc:	2300      	movs	r3, #0
 80038fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003906:	f10a 0a01 	add.w	sl, sl, #1
 800390a:	9304      	str	r3, [sp, #16]
 800390c:	9307      	str	r3, [sp, #28]
 800390e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003912:	931a      	str	r3, [sp, #104]	@ 0x68
 8003914:	4654      	mov	r4, sl
 8003916:	2205      	movs	r2, #5
 8003918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800391c:	484e      	ldr	r0, [pc, #312]	@ (8003a58 <_svfiprintf_r+0x1e4>)
 800391e:	f7fc fc5f 	bl	80001e0 <memchr>
 8003922:	9a04      	ldr	r2, [sp, #16]
 8003924:	b9d8      	cbnz	r0, 800395e <_svfiprintf_r+0xea>
 8003926:	06d0      	lsls	r0, r2, #27
 8003928:	bf44      	itt	mi
 800392a:	2320      	movmi	r3, #32
 800392c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003930:	0711      	lsls	r1, r2, #28
 8003932:	bf44      	itt	mi
 8003934:	232b      	movmi	r3, #43	@ 0x2b
 8003936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800393a:	f89a 3000 	ldrb.w	r3, [sl]
 800393e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003940:	d015      	beq.n	800396e <_svfiprintf_r+0xfa>
 8003942:	9a07      	ldr	r2, [sp, #28]
 8003944:	4654      	mov	r4, sl
 8003946:	2000      	movs	r0, #0
 8003948:	f04f 0c0a 	mov.w	ip, #10
 800394c:	4621      	mov	r1, r4
 800394e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003952:	3b30      	subs	r3, #48	@ 0x30
 8003954:	2b09      	cmp	r3, #9
 8003956:	d94b      	bls.n	80039f0 <_svfiprintf_r+0x17c>
 8003958:	b1b0      	cbz	r0, 8003988 <_svfiprintf_r+0x114>
 800395a:	9207      	str	r2, [sp, #28]
 800395c:	e014      	b.n	8003988 <_svfiprintf_r+0x114>
 800395e:	eba0 0308 	sub.w	r3, r0, r8
 8003962:	fa09 f303 	lsl.w	r3, r9, r3
 8003966:	4313      	orrs	r3, r2
 8003968:	9304      	str	r3, [sp, #16]
 800396a:	46a2      	mov	sl, r4
 800396c:	e7d2      	b.n	8003914 <_svfiprintf_r+0xa0>
 800396e:	9b03      	ldr	r3, [sp, #12]
 8003970:	1d19      	adds	r1, r3, #4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	9103      	str	r1, [sp, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	bfbb      	ittet	lt
 800397a:	425b      	neglt	r3, r3
 800397c:	f042 0202 	orrlt.w	r2, r2, #2
 8003980:	9307      	strge	r3, [sp, #28]
 8003982:	9307      	strlt	r3, [sp, #28]
 8003984:	bfb8      	it	lt
 8003986:	9204      	strlt	r2, [sp, #16]
 8003988:	7823      	ldrb	r3, [r4, #0]
 800398a:	2b2e      	cmp	r3, #46	@ 0x2e
 800398c:	d10a      	bne.n	80039a4 <_svfiprintf_r+0x130>
 800398e:	7863      	ldrb	r3, [r4, #1]
 8003990:	2b2a      	cmp	r3, #42	@ 0x2a
 8003992:	d132      	bne.n	80039fa <_svfiprintf_r+0x186>
 8003994:	9b03      	ldr	r3, [sp, #12]
 8003996:	1d1a      	adds	r2, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	9203      	str	r2, [sp, #12]
 800399c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039a0:	3402      	adds	r4, #2
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003a68 <_svfiprintf_r+0x1f4>
 80039a8:	7821      	ldrb	r1, [r4, #0]
 80039aa:	2203      	movs	r2, #3
 80039ac:	4650      	mov	r0, sl
 80039ae:	f7fc fc17 	bl	80001e0 <memchr>
 80039b2:	b138      	cbz	r0, 80039c4 <_svfiprintf_r+0x150>
 80039b4:	9b04      	ldr	r3, [sp, #16]
 80039b6:	eba0 000a 	sub.w	r0, r0, sl
 80039ba:	2240      	movs	r2, #64	@ 0x40
 80039bc:	4082      	lsls	r2, r0
 80039be:	4313      	orrs	r3, r2
 80039c0:	3401      	adds	r4, #1
 80039c2:	9304      	str	r3, [sp, #16]
 80039c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039c8:	4824      	ldr	r0, [pc, #144]	@ (8003a5c <_svfiprintf_r+0x1e8>)
 80039ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80039ce:	2206      	movs	r2, #6
 80039d0:	f7fc fc06 	bl	80001e0 <memchr>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d036      	beq.n	8003a46 <_svfiprintf_r+0x1d2>
 80039d8:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <_svfiprintf_r+0x1ec>)
 80039da:	bb1b      	cbnz	r3, 8003a24 <_svfiprintf_r+0x1b0>
 80039dc:	9b03      	ldr	r3, [sp, #12]
 80039de:	3307      	adds	r3, #7
 80039e0:	f023 0307 	bic.w	r3, r3, #7
 80039e4:	3308      	adds	r3, #8
 80039e6:	9303      	str	r3, [sp, #12]
 80039e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039ea:	4433      	add	r3, r6
 80039ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80039ee:	e76a      	b.n	80038c6 <_svfiprintf_r+0x52>
 80039f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80039f4:	460c      	mov	r4, r1
 80039f6:	2001      	movs	r0, #1
 80039f8:	e7a8      	b.n	800394c <_svfiprintf_r+0xd8>
 80039fa:	2300      	movs	r3, #0
 80039fc:	3401      	adds	r4, #1
 80039fe:	9305      	str	r3, [sp, #20]
 8003a00:	4619      	mov	r1, r3
 8003a02:	f04f 0c0a 	mov.w	ip, #10
 8003a06:	4620      	mov	r0, r4
 8003a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a0c:	3a30      	subs	r2, #48	@ 0x30
 8003a0e:	2a09      	cmp	r2, #9
 8003a10:	d903      	bls.n	8003a1a <_svfiprintf_r+0x1a6>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0c6      	beq.n	80039a4 <_svfiprintf_r+0x130>
 8003a16:	9105      	str	r1, [sp, #20]
 8003a18:	e7c4      	b.n	80039a4 <_svfiprintf_r+0x130>
 8003a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a1e:	4604      	mov	r4, r0
 8003a20:	2301      	movs	r3, #1
 8003a22:	e7f0      	b.n	8003a06 <_svfiprintf_r+0x192>
 8003a24:	ab03      	add	r3, sp, #12
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	462a      	mov	r2, r5
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <_svfiprintf_r+0x1f0>)
 8003a2c:	a904      	add	r1, sp, #16
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f3af 8000 	nop.w
 8003a34:	1c42      	adds	r2, r0, #1
 8003a36:	4606      	mov	r6, r0
 8003a38:	d1d6      	bne.n	80039e8 <_svfiprintf_r+0x174>
 8003a3a:	89ab      	ldrh	r3, [r5, #12]
 8003a3c:	065b      	lsls	r3, r3, #25
 8003a3e:	f53f af2d 	bmi.w	800389c <_svfiprintf_r+0x28>
 8003a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a44:	e72c      	b.n	80038a0 <_svfiprintf_r+0x2c>
 8003a46:	ab03      	add	r3, sp, #12
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	462a      	mov	r2, r5
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <_svfiprintf_r+0x1f0>)
 8003a4e:	a904      	add	r1, sp, #16
 8003a50:	4638      	mov	r0, r7
 8003a52:	f000 f879 	bl	8003b48 <_printf_i>
 8003a56:	e7ed      	b.n	8003a34 <_svfiprintf_r+0x1c0>
 8003a58:	08003ed0 	.word	0x08003ed0
 8003a5c:	08003eda 	.word	0x08003eda
 8003a60:	00000000 	.word	0x00000000
 8003a64:	080037bd 	.word	0x080037bd
 8003a68:	08003ed6 	.word	0x08003ed6

08003a6c <_printf_common>:
 8003a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a70:	4616      	mov	r6, r2
 8003a72:	4698      	mov	r8, r3
 8003a74:	688a      	ldr	r2, [r1, #8]
 8003a76:	690b      	ldr	r3, [r1, #16]
 8003a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bfb8      	it	lt
 8003a80:	4613      	movlt	r3, r2
 8003a82:	6033      	str	r3, [r6, #0]
 8003a84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a88:	4607      	mov	r7, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	b10a      	cbz	r2, 8003a92 <_printf_common+0x26>
 8003a8e:	3301      	adds	r3, #1
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	0699      	lsls	r1, r3, #26
 8003a96:	bf42      	ittt	mi
 8003a98:	6833      	ldrmi	r3, [r6, #0]
 8003a9a:	3302      	addmi	r3, #2
 8003a9c:	6033      	strmi	r3, [r6, #0]
 8003a9e:	6825      	ldr	r5, [r4, #0]
 8003aa0:	f015 0506 	ands.w	r5, r5, #6
 8003aa4:	d106      	bne.n	8003ab4 <_printf_common+0x48>
 8003aa6:	f104 0a19 	add.w	sl, r4, #25
 8003aaa:	68e3      	ldr	r3, [r4, #12]
 8003aac:	6832      	ldr	r2, [r6, #0]
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	42ab      	cmp	r3, r5
 8003ab2:	dc26      	bgt.n	8003b02 <_printf_common+0x96>
 8003ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ab8:	6822      	ldr	r2, [r4, #0]
 8003aba:	3b00      	subs	r3, #0
 8003abc:	bf18      	it	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	0692      	lsls	r2, r2, #26
 8003ac2:	d42b      	bmi.n	8003b1c <_printf_common+0xb0>
 8003ac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ac8:	4641      	mov	r1, r8
 8003aca:	4638      	mov	r0, r7
 8003acc:	47c8      	blx	r9
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d01e      	beq.n	8003b10 <_printf_common+0xa4>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	6922      	ldr	r2, [r4, #16]
 8003ad6:	f003 0306 	and.w	r3, r3, #6
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf02      	ittt	eq
 8003ade:	68e5      	ldreq	r5, [r4, #12]
 8003ae0:	6833      	ldreq	r3, [r6, #0]
 8003ae2:	1aed      	subeq	r5, r5, r3
 8003ae4:	68a3      	ldr	r3, [r4, #8]
 8003ae6:	bf0c      	ite	eq
 8003ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003aec:	2500      	movne	r5, #0
 8003aee:	4293      	cmp	r3, r2
 8003af0:	bfc4      	itt	gt
 8003af2:	1a9b      	subgt	r3, r3, r2
 8003af4:	18ed      	addgt	r5, r5, r3
 8003af6:	2600      	movs	r6, #0
 8003af8:	341a      	adds	r4, #26
 8003afa:	42b5      	cmp	r5, r6
 8003afc:	d11a      	bne.n	8003b34 <_printf_common+0xc8>
 8003afe:	2000      	movs	r0, #0
 8003b00:	e008      	b.n	8003b14 <_printf_common+0xa8>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4652      	mov	r2, sl
 8003b06:	4641      	mov	r1, r8
 8003b08:	4638      	mov	r0, r7
 8003b0a:	47c8      	blx	r9
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d103      	bne.n	8003b18 <_printf_common+0xac>
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	3501      	adds	r5, #1
 8003b1a:	e7c6      	b.n	8003aaa <_printf_common+0x3e>
 8003b1c:	18e1      	adds	r1, r4, r3
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	2030      	movs	r0, #48	@ 0x30
 8003b22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b26:	4422      	add	r2, r4
 8003b28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b30:	3302      	adds	r3, #2
 8003b32:	e7c7      	b.n	8003ac4 <_printf_common+0x58>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4622      	mov	r2, r4
 8003b38:	4641      	mov	r1, r8
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	47c8      	blx	r9
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d0e6      	beq.n	8003b10 <_printf_common+0xa4>
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7d9      	b.n	8003afa <_printf_common+0x8e>
	...

08003b48 <_printf_i>:
 8003b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	7e0f      	ldrb	r7, [r1, #24]
 8003b4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b50:	2f78      	cmp	r7, #120	@ 0x78
 8003b52:	4691      	mov	r9, r2
 8003b54:	4680      	mov	r8, r0
 8003b56:	460c      	mov	r4, r1
 8003b58:	469a      	mov	sl, r3
 8003b5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b5e:	d807      	bhi.n	8003b70 <_printf_i+0x28>
 8003b60:	2f62      	cmp	r7, #98	@ 0x62
 8003b62:	d80a      	bhi.n	8003b7a <_printf_i+0x32>
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	f000 80d2 	beq.w	8003d0e <_printf_i+0x1c6>
 8003b6a:	2f58      	cmp	r7, #88	@ 0x58
 8003b6c:	f000 80b9 	beq.w	8003ce2 <_printf_i+0x19a>
 8003b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b78:	e03a      	b.n	8003bf0 <_printf_i+0xa8>
 8003b7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b7e:	2b15      	cmp	r3, #21
 8003b80:	d8f6      	bhi.n	8003b70 <_printf_i+0x28>
 8003b82:	a101      	add	r1, pc, #4	@ (adr r1, 8003b88 <_printf_i+0x40>)
 8003b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003b71 	.word	0x08003b71
 8003b94:	08003b71 	.word	0x08003b71
 8003b98:	08003b71 	.word	0x08003b71
 8003b9c:	08003b71 	.word	0x08003b71
 8003ba0:	08003bf5 	.word	0x08003bf5
 8003ba4:	08003b71 	.word	0x08003b71
 8003ba8:	08003b71 	.word	0x08003b71
 8003bac:	08003b71 	.word	0x08003b71
 8003bb0:	08003b71 	.word	0x08003b71
 8003bb4:	08003cf5 	.word	0x08003cf5
 8003bb8:	08003c1f 	.word	0x08003c1f
 8003bbc:	08003caf 	.word	0x08003caf
 8003bc0:	08003b71 	.word	0x08003b71
 8003bc4:	08003b71 	.word	0x08003b71
 8003bc8:	08003d17 	.word	0x08003d17
 8003bcc:	08003b71 	.word	0x08003b71
 8003bd0:	08003c1f 	.word	0x08003c1f
 8003bd4:	08003b71 	.word	0x08003b71
 8003bd8:	08003b71 	.word	0x08003b71
 8003bdc:	08003cb7 	.word	0x08003cb7
 8003be0:	6833      	ldr	r3, [r6, #0]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6032      	str	r2, [r6, #0]
 8003be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e09d      	b.n	8003d30 <_printf_i+0x1e8>
 8003bf4:	6833      	ldr	r3, [r6, #0]
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	1d19      	adds	r1, r3, #4
 8003bfa:	6031      	str	r1, [r6, #0]
 8003bfc:	0606      	lsls	r6, r0, #24
 8003bfe:	d501      	bpl.n	8003c04 <_printf_i+0xbc>
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	e003      	b.n	8003c0c <_printf_i+0xc4>
 8003c04:	0645      	lsls	r5, r0, #25
 8003c06:	d5fb      	bpl.n	8003c00 <_printf_i+0xb8>
 8003c08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	da03      	bge.n	8003c18 <_printf_i+0xd0>
 8003c10:	232d      	movs	r3, #45	@ 0x2d
 8003c12:	426d      	negs	r5, r5
 8003c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c18:	4859      	ldr	r0, [pc, #356]	@ (8003d80 <_printf_i+0x238>)
 8003c1a:	230a      	movs	r3, #10
 8003c1c:	e011      	b.n	8003c42 <_printf_i+0xfa>
 8003c1e:	6821      	ldr	r1, [r4, #0]
 8003c20:	6833      	ldr	r3, [r6, #0]
 8003c22:	0608      	lsls	r0, r1, #24
 8003c24:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c28:	d402      	bmi.n	8003c30 <_printf_i+0xe8>
 8003c2a:	0649      	lsls	r1, r1, #25
 8003c2c:	bf48      	it	mi
 8003c2e:	b2ad      	uxthmi	r5, r5
 8003c30:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c32:	4853      	ldr	r0, [pc, #332]	@ (8003d80 <_printf_i+0x238>)
 8003c34:	6033      	str	r3, [r6, #0]
 8003c36:	bf14      	ite	ne
 8003c38:	230a      	movne	r3, #10
 8003c3a:	2308      	moveq	r3, #8
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c42:	6866      	ldr	r6, [r4, #4]
 8003c44:	60a6      	str	r6, [r4, #8]
 8003c46:	2e00      	cmp	r6, #0
 8003c48:	bfa2      	ittt	ge
 8003c4a:	6821      	ldrge	r1, [r4, #0]
 8003c4c:	f021 0104 	bicge.w	r1, r1, #4
 8003c50:	6021      	strge	r1, [r4, #0]
 8003c52:	b90d      	cbnz	r5, 8003c58 <_printf_i+0x110>
 8003c54:	2e00      	cmp	r6, #0
 8003c56:	d04b      	beq.n	8003cf0 <_printf_i+0x1a8>
 8003c58:	4616      	mov	r6, r2
 8003c5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c5e:	fb03 5711 	mls	r7, r3, r1, r5
 8003c62:	5dc7      	ldrb	r7, [r0, r7]
 8003c64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c68:	462f      	mov	r7, r5
 8003c6a:	42bb      	cmp	r3, r7
 8003c6c:	460d      	mov	r5, r1
 8003c6e:	d9f4      	bls.n	8003c5a <_printf_i+0x112>
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d10b      	bne.n	8003c8c <_printf_i+0x144>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	07df      	lsls	r7, r3, #31
 8003c78:	d508      	bpl.n	8003c8c <_printf_i+0x144>
 8003c7a:	6923      	ldr	r3, [r4, #16]
 8003c7c:	6861      	ldr	r1, [r4, #4]
 8003c7e:	4299      	cmp	r1, r3
 8003c80:	bfde      	ittt	le
 8003c82:	2330      	movle	r3, #48	@ 0x30
 8003c84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c8c:	1b92      	subs	r2, r2, r6
 8003c8e:	6122      	str	r2, [r4, #16]
 8003c90:	f8cd a000 	str.w	sl, [sp]
 8003c94:	464b      	mov	r3, r9
 8003c96:	aa03      	add	r2, sp, #12
 8003c98:	4621      	mov	r1, r4
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	f7ff fee6 	bl	8003a6c <_printf_common>
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d14a      	bne.n	8003d3a <_printf_i+0x1f2>
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	b004      	add	sp, #16
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	f043 0320 	orr.w	r3, r3, #32
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	4833      	ldr	r0, [pc, #204]	@ (8003d84 <_printf_i+0x23c>)
 8003cb8:	2778      	movs	r7, #120	@ 0x78
 8003cba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	6831      	ldr	r1, [r6, #0]
 8003cc2:	061f      	lsls	r7, r3, #24
 8003cc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cc8:	d402      	bmi.n	8003cd0 <_printf_i+0x188>
 8003cca:	065f      	lsls	r7, r3, #25
 8003ccc:	bf48      	it	mi
 8003cce:	b2ad      	uxthmi	r5, r5
 8003cd0:	6031      	str	r1, [r6, #0]
 8003cd2:	07d9      	lsls	r1, r3, #31
 8003cd4:	bf44      	itt	mi
 8003cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8003cda:	6023      	strmi	r3, [r4, #0]
 8003cdc:	b11d      	cbz	r5, 8003ce6 <_printf_i+0x19e>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	e7ac      	b.n	8003c3c <_printf_i+0xf4>
 8003ce2:	4827      	ldr	r0, [pc, #156]	@ (8003d80 <_printf_i+0x238>)
 8003ce4:	e7e9      	b.n	8003cba <_printf_i+0x172>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f023 0320 	bic.w	r3, r3, #32
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	e7f6      	b.n	8003cde <_printf_i+0x196>
 8003cf0:	4616      	mov	r6, r2
 8003cf2:	e7bd      	b.n	8003c70 <_printf_i+0x128>
 8003cf4:	6833      	ldr	r3, [r6, #0]
 8003cf6:	6825      	ldr	r5, [r4, #0]
 8003cf8:	6961      	ldr	r1, [r4, #20]
 8003cfa:	1d18      	adds	r0, r3, #4
 8003cfc:	6030      	str	r0, [r6, #0]
 8003cfe:	062e      	lsls	r6, r5, #24
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	d501      	bpl.n	8003d08 <_printf_i+0x1c0>
 8003d04:	6019      	str	r1, [r3, #0]
 8003d06:	e002      	b.n	8003d0e <_printf_i+0x1c6>
 8003d08:	0668      	lsls	r0, r5, #25
 8003d0a:	d5fb      	bpl.n	8003d04 <_printf_i+0x1bc>
 8003d0c:	8019      	strh	r1, [r3, #0]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	4616      	mov	r6, r2
 8003d14:	e7bc      	b.n	8003c90 <_printf_i+0x148>
 8003d16:	6833      	ldr	r3, [r6, #0]
 8003d18:	1d1a      	adds	r2, r3, #4
 8003d1a:	6032      	str	r2, [r6, #0]
 8003d1c:	681e      	ldr	r6, [r3, #0]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	2100      	movs	r1, #0
 8003d22:	4630      	mov	r0, r6
 8003d24:	f7fc fa5c 	bl	80001e0 <memchr>
 8003d28:	b108      	cbz	r0, 8003d2e <_printf_i+0x1e6>
 8003d2a:	1b80      	subs	r0, r0, r6
 8003d2c:	6060      	str	r0, [r4, #4]
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	2300      	movs	r3, #0
 8003d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d38:	e7aa      	b.n	8003c90 <_printf_i+0x148>
 8003d3a:	6923      	ldr	r3, [r4, #16]
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	4649      	mov	r1, r9
 8003d40:	4640      	mov	r0, r8
 8003d42:	47d0      	blx	sl
 8003d44:	3001      	adds	r0, #1
 8003d46:	d0ad      	beq.n	8003ca4 <_printf_i+0x15c>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	079b      	lsls	r3, r3, #30
 8003d4c:	d413      	bmi.n	8003d76 <_printf_i+0x22e>
 8003d4e:	68e0      	ldr	r0, [r4, #12]
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	4298      	cmp	r0, r3
 8003d54:	bfb8      	it	lt
 8003d56:	4618      	movlt	r0, r3
 8003d58:	e7a6      	b.n	8003ca8 <_printf_i+0x160>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	4649      	mov	r1, r9
 8003d60:	4640      	mov	r0, r8
 8003d62:	47d0      	blx	sl
 8003d64:	3001      	adds	r0, #1
 8003d66:	d09d      	beq.n	8003ca4 <_printf_i+0x15c>
 8003d68:	3501      	adds	r5, #1
 8003d6a:	68e3      	ldr	r3, [r4, #12]
 8003d6c:	9903      	ldr	r1, [sp, #12]
 8003d6e:	1a5b      	subs	r3, r3, r1
 8003d70:	42ab      	cmp	r3, r5
 8003d72:	dcf2      	bgt.n	8003d5a <_printf_i+0x212>
 8003d74:	e7eb      	b.n	8003d4e <_printf_i+0x206>
 8003d76:	2500      	movs	r5, #0
 8003d78:	f104 0619 	add.w	r6, r4, #25
 8003d7c:	e7f5      	b.n	8003d6a <_printf_i+0x222>
 8003d7e:	bf00      	nop
 8003d80:	08003ee1 	.word	0x08003ee1
 8003d84:	08003ef2 	.word	0x08003ef2

08003d88 <memmove>:
 8003d88:	4288      	cmp	r0, r1
 8003d8a:	b510      	push	{r4, lr}
 8003d8c:	eb01 0402 	add.w	r4, r1, r2
 8003d90:	d902      	bls.n	8003d98 <memmove+0x10>
 8003d92:	4284      	cmp	r4, r0
 8003d94:	4623      	mov	r3, r4
 8003d96:	d807      	bhi.n	8003da8 <memmove+0x20>
 8003d98:	1e43      	subs	r3, r0, #1
 8003d9a:	42a1      	cmp	r1, r4
 8003d9c:	d008      	beq.n	8003db0 <memmove+0x28>
 8003d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003da2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003da6:	e7f8      	b.n	8003d9a <memmove+0x12>
 8003da8:	4402      	add	r2, r0
 8003daa:	4601      	mov	r1, r0
 8003dac:	428a      	cmp	r2, r1
 8003dae:	d100      	bne.n	8003db2 <memmove+0x2a>
 8003db0:	bd10      	pop	{r4, pc}
 8003db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dba:	e7f7      	b.n	8003dac <memmove+0x24>

08003dbc <_sbrk_r>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	4d06      	ldr	r5, [pc, #24]	@ (8003dd8 <_sbrk_r+0x1c>)
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	602b      	str	r3, [r5, #0]
 8003dc8:	f7fd f962 	bl	8001090 <_sbrk>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d102      	bne.n	8003dd6 <_sbrk_r+0x1a>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	b103      	cbz	r3, 8003dd6 <_sbrk_r+0x1a>
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	200002b4 	.word	0x200002b4

08003ddc <memcpy>:
 8003ddc:	440a      	add	r2, r1
 8003dde:	4291      	cmp	r1, r2
 8003de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003de4:	d100      	bne.n	8003de8 <memcpy+0xc>
 8003de6:	4770      	bx	lr
 8003de8:	b510      	push	{r4, lr}
 8003dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003df2:	4291      	cmp	r1, r2
 8003df4:	d1f9      	bne.n	8003dea <memcpy+0xe>
 8003df6:	bd10      	pop	{r4, pc}

08003df8 <_realloc_r>:
 8003df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dfc:	4680      	mov	r8, r0
 8003dfe:	4615      	mov	r5, r2
 8003e00:	460c      	mov	r4, r1
 8003e02:	b921      	cbnz	r1, 8003e0e <_realloc_r+0x16>
 8003e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e08:	4611      	mov	r1, r2
 8003e0a:	f7ff bc4b 	b.w	80036a4 <_malloc_r>
 8003e0e:	b92a      	cbnz	r2, 8003e1c <_realloc_r+0x24>
 8003e10:	f7ff fbdc 	bl	80035cc <_free_r>
 8003e14:	2400      	movs	r4, #0
 8003e16:	4620      	mov	r0, r4
 8003e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e1c:	f000 f81a 	bl	8003e54 <_malloc_usable_size_r>
 8003e20:	4285      	cmp	r5, r0
 8003e22:	4606      	mov	r6, r0
 8003e24:	d802      	bhi.n	8003e2c <_realloc_r+0x34>
 8003e26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003e2a:	d8f4      	bhi.n	8003e16 <_realloc_r+0x1e>
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	4640      	mov	r0, r8
 8003e30:	f7ff fc38 	bl	80036a4 <_malloc_r>
 8003e34:	4607      	mov	r7, r0
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d0ec      	beq.n	8003e14 <_realloc_r+0x1c>
 8003e3a:	42b5      	cmp	r5, r6
 8003e3c:	462a      	mov	r2, r5
 8003e3e:	4621      	mov	r1, r4
 8003e40:	bf28      	it	cs
 8003e42:	4632      	movcs	r2, r6
 8003e44:	f7ff ffca 	bl	8003ddc <memcpy>
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	f7ff fbbe 	bl	80035cc <_free_r>
 8003e50:	463c      	mov	r4, r7
 8003e52:	e7e0      	b.n	8003e16 <_realloc_r+0x1e>

08003e54 <_malloc_usable_size_r>:
 8003e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e58:	1f18      	subs	r0, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bfbc      	itt	lt
 8003e5e:	580b      	ldrlt	r3, [r1, r0]
 8003e60:	18c0      	addlt	r0, r0, r3
 8003e62:	4770      	bx	lr

08003e64 <_init>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr

08003e70 <_fini>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr
