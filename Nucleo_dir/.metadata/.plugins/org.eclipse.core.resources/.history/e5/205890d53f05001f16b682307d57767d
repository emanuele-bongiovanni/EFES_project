/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi3;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

	//W25Q16JV instructions
const uint8_t MEM_WRITE_ENABLE 		= 0x06;
const uint8_t MEM_WRITE_DISABLE 	= 0x04;
const uint8_t MEM_READ_DATA	 		= 0x03;
const uint8_t MEM_PAGE_WRITE		= 0x02;
const uint8_t MEM_READ_STATUS_REG	= 0x05;
const uint8_t MEM_CHIP_ERASE 		= 0x60;
const uint8_t MEM_STAT_REG_1_WRITE  = 0x01;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI3_Init(void);
/* USER CODE BEGIN PFP */

void WaitBusyMem(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	char uart_buffer[50];
	int uart_buffer_lenght;
	uint32_t spi_buf;
	HAL_StatusTypeDef returnStatus;
	uint32_t addr,masked_addr;
	uint8_t data1, data2;
	uint32_t data_buffer;
	uint64_t write_buffer;
	uint32_t read_buffer;
	uint8_t data_print1, data_print2, data_print3, data_print4;
	uint8_t from_mem;
	uint16_t status_write;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI3_Init();
  /* USER CODE BEGIN 2 */

  	  //Chip select line of memory is high as default
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

  uart_buffer_lenght = sprintf(uart_buffer, "MEMORY TEST\r\n");
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, uart_buffer_lenght, 100);



  //send write enable
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_WRITE_ENABLE, 1, 100); //should return HAL_OK
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

  //prova

  //reset the chip
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
  returnStatus = HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_CHIP_ERASE, 1, 100); //should return HAL_OK
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

  //wait for reset

  WaitBusyMem();

  //set status reg flags:
  status_write = 0;
  status_write = status_write | MEM_STAT_REG_1_WRITE;

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_WRITE_ENABLE, 1, 100); //should return HAL_OK
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&status_write, 2, 100); //should return HAL_OK
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

  addr = 0;
  data1 = 2;
  data2 = 3;
   /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */



	  //spi_buf = 0;
	  		  masked_addr = 0x00FFFFFF & addr; //qui non dovrebbe servire, ma lo facciamo lo stesso
	  		  read_buffer = 0;
	  		  read_buffer = read_buffer | ((uint32_t) masked_addr) << 8;
	  		  read_buffer = read_buffer | ((uint32_t) MEM_READ_DATA);
	  	  //read data
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	  		  HAL_SPI_Transmit(&hspi3, (uint8_t *)&read_buffer, 4, 100);
	  		  HAL_SPI_Receive(&hspi3, (uint8_t*)&spi_buf, 4, 100);
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

	  		  WaitBusyMem();

	  		uart_buffer_lenght = sprintf(uart_buffer, "value: %x r\n",(unsigned int)addr );
	  		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, uart_buffer_lenght, 100);

//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_READ_STATUS_REG, 1, 100);
//	  HAL_SPI_Receive(&hspi3, (uint8_t*)&from_mem, 1, 100);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//
//	  write_buffer = 0;
//	  write_buffer = ((uint64_t) data_buffer) << 32;
//	  write_buffer = write_buffer | ((uint64_t) addr) << 8;
//	  write_buffer = write_buffer | ((uint64_t) MEM_PAGE_WRITE);
//
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//	  returnStatus = HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_WRITE_ENABLE, 1, 100); //should return HAL_OK
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_READ_STATUS_REG, 1, 100);
//	  HAL_SPI_Receive(&hspi3, (uint8_t*)&from_mem, 1, 100);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//
//
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//	  returnStatus = HAL_SPI_Transmit(&hspi3, (uint8_t *)&write_buffer, 8, 100);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//
//
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_READ_STATUS_REG, 1, 100);
//	  HAL_SPI_Receive(&hspi3, (uint8_t*)&from_mem, 1, 100);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//
//	  read_buffer = 0;
//	  read_buffer = read_buffer | ((uint32_t) addr) << 8;
//	  read_buffer = read_buffer | ((uint32_t) MEM_READ_DATA);
//
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//	  returnStatus = HAL_SPI_Transmit(&hspi3, (uint8_t *)&read_buffer, 4, 100);
//	  returnStatus = HAL_SPI_Receive(&hspi3, (uint8_t*)&spi_buf, 4, 100);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//  }

//	  addr = 0;
//	  spi_buf = 0;
//
//	  for(int i = 0; i < 10; i++){
//		  data_buffer = 0;
//		  data_buffer = data_buffer | ((uint32_t)data1) << 24;
//		  data_buffer = data_buffer | ((uint32_t)data2) << 16;
//
//		  data1 = i * 2;
//		  data2 = i * 3;
//
//		  data_buffer = data_buffer | ((uint32_t)data1) << 8;
//		  data_buffer = data_buffer | ((uint32_t)data2);
//
//
//		  masked_addr = 0x00FFFFFF & addr;
//		  write_buffer = 0;
//		  write_buffer = ((uint64_t) data_buffer) << 32;
//		  write_buffer = write_buffer | ((uint64_t) masked_addr) << 8;
//		  write_buffer = write_buffer | ((uint64_t) MEM_PAGE_WRITE);
//
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//		  returnStatus = HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_WRITE_ENABLE, 1, 100); //should return HAL_OK
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//		//send data
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//		  HAL_SPI_Transmit(&hspi3, (uint8_t *)&write_buffer, 8, 100);
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//
//		  WaitBusyMem();
//
//		  data1 = data1 * 4;
//		  data2 = data2 * 5;
//
//		  addr += 256;
//	  }

//	  addr = 0;
//	  for(int i = 0; i < 10; i++){
//		  masked_addr = 0x00FFFFFF & addr; //qui non dovrebbe servire, ma lo facciamo lo stesso
//		  read_buffer = 0;
//		  read_buffer = read_buffer | ((uint32_t) masked_addr) << 8;
//		  read_buffer = read_buffer | ((uint32_t) MEM_READ_DATA);
//	  //read data
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//		  HAL_SPI_Transmit(&hspi3, (uint8_t *)&read_buffer, 4, 100);
//		  HAL_SPI_Receive(&hspi3, (uint8_t*)&spi_buf, 4, 100);
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//
//		  WaitBusyMem();
//
//
//		  data_print1 = (spi_buf>>24) & 0xFF;
//		  data_print2 = (spi_buf>>16) & 0xFF;
//		  data_print3 = (spi_buf>>8) & 0xFF;
//		  data_print4 = (spi_buf) & 0xFF;
//
//
//
//		  uart_buffer_lenght = sprintf(uart_buffer, "values: %x | %x | %x | %x\r\n",(unsigned int)data_print1, (unsigned int)data_print2,(unsigned int)data_print3,(unsigned int)data_print4 );
//		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, uart_buffer_lenght, 100);
//
//		  addr += 256;
//	  }

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void WaitBusyMem(void){
	uint8_t  from_mem;
	do{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
		  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_READ_STATUS_REG, 1, 100);
		  HAL_SPI_Receive(&hspi3, (uint8_t*)&from_mem, 1, 100);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
		  HAL_Delay(5);
	  }while((from_mem & 0x01) != 0); //busy is the rightmost bit of status reg

	return;
}


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
