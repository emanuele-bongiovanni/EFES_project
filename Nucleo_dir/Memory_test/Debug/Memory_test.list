
Memory_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000392c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003acc  08003acc  00004acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b48  08003b48  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b48  08003b48  00004b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b50  08003b50  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b50  08003b50  00004b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b54  08003b54  00004b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b58  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08003bb4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003bb4  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fe9  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166f  00000000  00000000  0000e075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0000f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000643  00000000  00000000  0000ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a9b  00000000  00000000  00010553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a10b  00000000  00000000  00025fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000876ca  00000000  00000000  000300f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b77c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000261c  00000000  00000000  000b7808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b9e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ab4 	.word	0x08003ab4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003ab4 	.word	0x08003ab4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000574:	b0a5      	sub	sp, #148	@ 0x94
 8000576:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fc68 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f9cc 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fa94 	bl	8000aac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 fa68 	bl	8000a58 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000588:	f000 fa30 	bl	80009ec <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  	  //Chip select line of memory is high as default
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000592:	48c3      	ldr	r0, [pc, #780]	@ (80008a0 <main+0x330>)
 8000594:	f000 ff5a 	bl	800144c <HAL_GPIO_WritePin>

  uart_buffer_lenght = sprintf(uart_buffer, "MEMORY TEST\r\n");
 8000598:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800059c:	49c1      	ldr	r1, [pc, #772]	@ (80008a4 <main+0x334>)
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fde8 	bl	8003174 <siprintf>
 80005a4:	6778      	str	r0, [r7, #116]	@ 0x74
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, uart_buffer_lenght, 100);
 80005a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80005ae:	2364      	movs	r3, #100	@ 0x64
 80005b0:	48bd      	ldr	r0, [pc, #756]	@ (80008a8 <main+0x338>)
 80005b2:	f002 fa23 	bl	80029fc <HAL_UART_Transmit>



  //send write enable
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005bc:	48b8      	ldr	r0, [pc, #736]	@ (80008a0 <main+0x330>)
 80005be:	f000 ff45 	bl	800144c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_WRITE_ENABLE, 1, 100); //should return HAL_OK
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	2201      	movs	r2, #1
 80005c6:	49b9      	ldr	r1, [pc, #740]	@ (80008ac <main+0x33c>)
 80005c8:	48b9      	ldr	r0, [pc, #740]	@ (80008b0 <main+0x340>)
 80005ca:	f001 fc7a 	bl	8001ec2 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	48b2      	ldr	r0, [pc, #712]	@ (80008a0 <main+0x330>)
 80005d6:	f000 ff39 	bl	800144c <HAL_GPIO_WritePin>

  //prova

  //reset the chip
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e0:	48af      	ldr	r0, [pc, #700]	@ (80008a0 <main+0x330>)
 80005e2:	f000 ff33 	bl	800144c <HAL_GPIO_WritePin>
  returnStatus = HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_CHIP_ERASE, 1, 100); //should return HAL_OK
 80005e6:	2364      	movs	r3, #100	@ 0x64
 80005e8:	2201      	movs	r2, #1
 80005ea:	49b2      	ldr	r1, [pc, #712]	@ (80008b4 <main+0x344>)
 80005ec:	48b0      	ldr	r0, [pc, #704]	@ (80008b0 <main+0x340>)
 80005ee:	f001 fc68 	bl	8001ec2 <HAL_SPI_Transmit>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fe:	48a8      	ldr	r0, [pc, #672]	@ (80008a0 <main+0x330>)
 8000600:	f000 ff24 	bl	800144c <HAL_GPIO_WritePin>

  //wait for reset

  WaitBusyMem();
 8000604:	f000 f95a 	bl	80008bc <WaitBusyMem>

  //set status reg flags:
  status_write = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	837b      	strh	r3, [r7, #26]
  status_write = status_write | MEM_STAT_REG_1_WRITE;
 800060c:	2301      	movs	r3, #1
 800060e:	461a      	mov	r2, r3
 8000610:	8b7b      	ldrh	r3, [r7, #26]
 8000612:	4313      	orrs	r3, r2
 8000614:	b29b      	uxth	r3, r3
 8000616:	837b      	strh	r3, [r7, #26]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800061e:	48a0      	ldr	r0, [pc, #640]	@ (80008a0 <main+0x330>)
 8000620:	f000 ff14 	bl	800144c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_WRITE_ENABLE, 1, 100); //should return HAL_OK
 8000624:	2364      	movs	r3, #100	@ 0x64
 8000626:	2201      	movs	r2, #1
 8000628:	49a0      	ldr	r1, [pc, #640]	@ (80008ac <main+0x33c>)
 800062a:	48a1      	ldr	r0, [pc, #644]	@ (80008b0 <main+0x340>)
 800062c:	f001 fc49 	bl	8001ec2 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000636:	489a      	ldr	r0, [pc, #616]	@ (80008a0 <main+0x330>)
 8000638:	f000 ff08 	bl	800144c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000642:	4897      	ldr	r0, [pc, #604]	@ (80008a0 <main+0x330>)
 8000644:	f000 ff02 	bl	800144c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&status_write, 2, 100); //should return HAL_OK
 8000648:	f107 011a 	add.w	r1, r7, #26
 800064c:	2364      	movs	r3, #100	@ 0x64
 800064e:	2202      	movs	r2, #2
 8000650:	4897      	ldr	r0, [pc, #604]	@ (80008b0 <main+0x340>)
 8000652:	f001 fc36 	bl	8001ec2 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800065c:	4890      	ldr	r0, [pc, #576]	@ (80008a0 <main+0x330>)
 800065e:	f000 fef5 	bl	800144c <HAL_GPIO_WritePin>

  addr = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  data1 = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
  data2 = 3;
 800066e:	2303      	movs	r3, #3
 8000670:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
//	  returnStatus = HAL_SPI_Transmit(&hspi3, (uint8_t *)&read_buffer, 4, 100);
//	  returnStatus = HAL_SPI_Receive(&hspi3, (uint8_t*)&spi_buf, 4, 100);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//  }

	  addr = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  spi_buf = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  for(int i = 0; i < 10; i++){
 800067e:	2300      	movs	r3, #0
 8000680:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000682:	e0a0      	b.n	80007c6 <main+0x256>
		  data_buffer = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	667b      	str	r3, [r7, #100]	@ 0x64
		  data_buffer = data_buffer | ((uint32_t)data1) << 24;
 8000688:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800068c:	061b      	lsls	r3, r3, #24
 800068e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000690:	4313      	orrs	r3, r2
 8000692:	667b      	str	r3, [r7, #100]	@ 0x64
		  data_buffer = data_buffer | ((uint32_t)data2) << 16;
 8000694:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8000698:	041b      	lsls	r3, r3, #16
 800069a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800069c:	4313      	orrs	r3, r2
 800069e:	667b      	str	r3, [r7, #100]	@ 0x64

		  data1 = i * 2;
 80006a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		  data2 = i * 3;
 80006aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82

		  data_buffer = data_buffer | ((uint32_t)data1) << 8;
 80006ba:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80006c2:	4313      	orrs	r3, r2
 80006c4:	667b      	str	r3, [r7, #100]	@ 0x64
		  data_buffer = data_buffer | ((uint32_t)data2);
 80006c6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80006ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80006cc:	4313      	orrs	r3, r2
 80006ce:	667b      	str	r3, [r7, #100]	@ 0x64


		  masked_addr = 0x00FFFFFF & addr;
 80006d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80006d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80006d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  write_buffer = 0;
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  write_buffer = ((uint64_t) data_buffer) << 32;
 80006e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006e8:	2200      	movs	r2, #0
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	617a      	str	r2, [r7, #20]
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	6939      	ldr	r1, [r7, #16]
 80006f8:	000b      	movs	r3, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  write_buffer = write_buffer | ((uint64_t) masked_addr) << 8;
 8000700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000702:	2200      	movs	r2, #0
 8000704:	469a      	mov	sl, r3
 8000706:	4693      	mov	fp, r2
 8000708:	ea4f 691a 	mov.w	r9, sl, lsr #24
 800070c:	ea4f 280a 	mov.w	r8, sl, lsl #8
 8000710:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000714:	ea48 0102 	orr.w	r1, r8, r2
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	ea49 0303 	orr.w	r3, r9, r3
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000724:	e9c7 3408 	strd	r3, r4, [r7, #32]
		  write_buffer = write_buffer | ((uint64_t) MEM_PAGE_WRITE);
 8000728:	2302      	movs	r3, #2
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2200      	movs	r2, #0
 800072e:	461d      	mov	r5, r3
 8000730:	4616      	mov	r6, r2
 8000732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000736:	ea45 0102 	orr.w	r1, r5, r2
 800073a:	6039      	str	r1, [r7, #0]
 800073c:	4333      	orrs	r3, r6
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000744:	e9c7 3408 	strd	r3, r4, [r7, #32]

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074e:	4854      	ldr	r0, [pc, #336]	@ (80008a0 <main+0x330>)
 8000750:	f000 fe7c 	bl	800144c <HAL_GPIO_WritePin>
		  returnStatus = HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_WRITE_ENABLE, 1, 100); //should return HAL_OK
 8000754:	2364      	movs	r3, #100	@ 0x64
 8000756:	2201      	movs	r2, #1
 8000758:	4954      	ldr	r1, [pc, #336]	@ (80008ac <main+0x33c>)
 800075a:	4855      	ldr	r0, [pc, #340]	@ (80008b0 <main+0x340>)
 800075c:	f001 fbb1 	bl	8001ec2 <HAL_SPI_Transmit>
 8000760:	4603      	mov	r3, r0
 8000762:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800076c:	484c      	ldr	r0, [pc, #304]	@ (80008a0 <main+0x330>)
 800076e:	f000 fe6d 	bl	800144c <HAL_GPIO_WritePin>
		//send data
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000778:	4849      	ldr	r0, [pc, #292]	@ (80008a0 <main+0x330>)
 800077a:	f000 fe67 	bl	800144c <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi3, (uint8_t *)&write_buffer, 8, 100);
 800077e:	f107 0120 	add.w	r1, r7, #32
 8000782:	2364      	movs	r3, #100	@ 0x64
 8000784:	2208      	movs	r2, #8
 8000786:	484a      	ldr	r0, [pc, #296]	@ (80008b0 <main+0x340>)
 8000788:	f001 fb9b 	bl	8001ec2 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000792:	4843      	ldr	r0, [pc, #268]	@ (80008a0 <main+0x330>)
 8000794:	f000 fe5a 	bl	800144c <HAL_GPIO_WritePin>

		  WaitBusyMem();
 8000798:	f000 f890 	bl	80008bc <WaitBusyMem>

		  data1 = data1 * 4;
 800079c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		  data2 = data2 * 5;
 80007a6:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82

		  addr += 256;
 80007b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007b8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80007bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  for(int i = 0; i < 10; i++){
 80007c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007c2:	3301      	adds	r3, #1
 80007c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80007c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007c8:	2b09      	cmp	r3, #9
 80007ca:	f77f af5b 	ble.w	8000684 <main+0x114>
	  }

	  addr = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  for(int i = 0; i < 10; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80007d8:	e05e      	b.n	8000898 <main+0x328>
		  masked_addr = 0x00FFFFFF & addr; //qui non dovrebbe servire, ma lo facciamo lo stesso
 80007da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80007e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  read_buffer = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
		  read_buffer = read_buffer | ((uint32_t) masked_addr) << 8;
 80007e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007ea:	021a      	lsls	r2, r3, #8
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	61fb      	str	r3, [r7, #28]
		  read_buffer = read_buffer | ((uint32_t) MEM_READ_DATA);
 80007f2:	2303      	movs	r3, #3
 80007f4:	461a      	mov	r2, r3
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	61fb      	str	r3, [r7, #28]
	  //read data
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000802:	4827      	ldr	r0, [pc, #156]	@ (80008a0 <main+0x330>)
 8000804:	f000 fe22 	bl	800144c <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi3, (uint8_t *)&read_buffer, 4, 100);
 8000808:	f107 011c 	add.w	r1, r7, #28
 800080c:	2364      	movs	r3, #100	@ 0x64
 800080e:	2204      	movs	r2, #4
 8000810:	4827      	ldr	r0, [pc, #156]	@ (80008b0 <main+0x340>)
 8000812:	f001 fb56 	bl	8001ec2 <HAL_SPI_Transmit>
		  HAL_SPI_Receive(&hspi3, (uint8_t*)&spi_buf, 4, 100);
 8000816:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800081a:	2364      	movs	r3, #100	@ 0x64
 800081c:	2204      	movs	r2, #4
 800081e:	4824      	ldr	r0, [pc, #144]	@ (80008b0 <main+0x340>)
 8000820:	f001 fc92 	bl	8002148 <HAL_SPI_Receive>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800082a:	481d      	ldr	r0, [pc, #116]	@ (80008a0 <main+0x330>)
 800082c:	f000 fe0e 	bl	800144c <HAL_GPIO_WritePin>

		  WaitBusyMem();
 8000830:	f000 f844 	bl	80008bc <WaitBusyMem>


		  data_print1 = (spi_buf>>24) & 0xFF;
 8000834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000836:	0e1b      	lsrs	r3, r3, #24
 8000838:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		  data_print2 = (spi_buf>>16) & 0xFF;
 800083c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800083e:	0c1b      	lsrs	r3, r3, #16
 8000840:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
		  data_print3 = (spi_buf>>8) & 0xFF;
 8000844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000846:	0a1b      	lsrs	r3, r3, #8
 8000848:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
		  data_print4 = (spi_buf) & 0xFF;
 800084c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800084e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68



		  uart_buffer_lenght = sprintf(uart_buffer, "values: %x | %x | %x | %x\r\n",(unsigned int)data_print1, (unsigned int)data_print2,(unsigned int)data_print3,(unsigned int)data_print4 );
 8000852:	f897 406b 	ldrb.w	r4, [r7, #107]	@ 0x6b
 8000856:	f897 106a 	ldrb.w	r1, [r7, #106]	@ 0x6a
 800085a:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 800085e:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000862:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	9200      	str	r2, [sp, #0]
 800086a:	460b      	mov	r3, r1
 800086c:	4622      	mov	r2, r4
 800086e:	4912      	ldr	r1, [pc, #72]	@ (80008b8 <main+0x348>)
 8000870:	f002 fc80 	bl	8003174 <siprintf>
 8000874:	6778      	str	r0, [r7, #116]	@ 0x74
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, uart_buffer_lenght, 100);
 8000876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000878:	b29a      	uxth	r2, r3
 800087a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800087e:	2364      	movs	r3, #100	@ 0x64
 8000880:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <main+0x338>)
 8000882:	f002 f8bb 	bl	80029fc <HAL_UART_Transmit>

		  addr += 256;
 8000886:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800088a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800088e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  for(int i = 0; i < 10; i++){
 8000892:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000894:	3301      	adds	r3, #1
 8000896:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000898:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800089a:	2b09      	cmp	r3, #9
 800089c:	dd9d      	ble.n	80007da <main+0x26a>
	  addr = 0;
 800089e:	e6e9      	b.n	8000674 <main+0x104>
 80008a0:	40020000 	.word	0x40020000
 80008a4:	08003acc 	.word	0x08003acc
 80008a8:	200000d0 	.word	0x200000d0
 80008ac:	08003af8 	.word	0x08003af8
 80008b0:	20000078 	.word	0x20000078
 80008b4:	08003afa 	.word	0x08003afa
 80008b8:	08003adc 	.word	0x08003adc

080008bc <WaitBusyMem>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void WaitBusyMem(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t  from_mem;
	do{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c8:	4810      	ldr	r0, [pc, #64]	@ (800090c <WaitBusyMem+0x50>)
 80008ca:	f000 fdbf 	bl	800144c <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi3, (uint8_t *)&MEM_READ_STATUS_REG, 1, 100);
 80008ce:	2364      	movs	r3, #100	@ 0x64
 80008d0:	2201      	movs	r2, #1
 80008d2:	490f      	ldr	r1, [pc, #60]	@ (8000910 <WaitBusyMem+0x54>)
 80008d4:	480f      	ldr	r0, [pc, #60]	@ (8000914 <WaitBusyMem+0x58>)
 80008d6:	f001 faf4 	bl	8001ec2 <HAL_SPI_Transmit>
		  HAL_SPI_Receive(&hspi3, (uint8_t*)&from_mem, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <WaitBusyMem+0x58>)
 80008e2:	f001 fc31 	bl	8002148 <HAL_SPI_Receive>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ec:	4807      	ldr	r0, [pc, #28]	@ (800090c <WaitBusyMem+0x50>)
 80008ee:	f000 fdad 	bl	800144c <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 80008f2:	2005      	movs	r0, #5
 80008f4:	f000 fb1c 	bl	8000f30 <HAL_Delay>
	  }while((from_mem & 0x01) != 0); //busy is the rightmost bit of status reg
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1df      	bne.n	80008c2 <WaitBusyMem+0x6>

	return;
 8000902:	bf00      	nop
}
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020000 	.word	0x40020000
 8000910:	08003af9 	.word	0x08003af9
 8000914:	20000078 	.word	0x20000078

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	@ 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	@ 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fc44 	bl	80031b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a27      	ldr	r2, [pc, #156]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <SystemClock_Config+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <SystemClock_Config+0xd0>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <SystemClock_Config+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000988:	2310      	movs	r3, #16
 800098a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800098c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000990:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000992:	2304      	movs	r3, #4
 8000994:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000996:	2304      	movs	r3, #4
 8000998:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fd6e 	bl	8001480 <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009aa:	f000 f8ef 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2102      	movs	r1, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 ffd0 	bl	8001970 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009d6:	f000 f8d9 	bl	8000b8c <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3750      	adds	r7, #80	@ 0x50
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009f0:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_SPI3_Init+0x64>)
 80009f2:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <MX_SPI3_Init+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <MX_SPI3_Init+0x64>)
 80009f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a1c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a20:	2228      	movs	r2, #40	@ 0x28
 8000a22:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a38:	220a      	movs	r2, #10
 8000a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <MX_SPI3_Init+0x64>)
 8000a3e:	f001 f9b7 	bl	8001db0 <HAL_SPI_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000a48:	f000 f8a0 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000078 	.word	0x20000078
 8000a54:	40003c00 	.word	0x40003c00

08000a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <MX_USART2_UART_Init+0x50>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a90:	f001 ff64 	bl	800295c <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a9a:	f000 f877 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000d0 	.word	0x200000d0
 8000aa8:	40004400 	.word	0x40004400

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a2d      	ldr	r2, [pc, #180]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a26      	ldr	r2, [pc, #152]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a1f      	ldr	r2, [pc, #124]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a18      	ldr	r2, [pc, #96]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_GPIO_Init+0xd4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000b38:	4812      	ldr	r0, [pc, #72]	@ (8000b84 <MX_GPIO_Init+0xd8>)
 8000b3a:	f000 fc87 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <MX_GPIO_Init+0xdc>)
 8000b56:	f000 faf5 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000b5a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_GPIO_Init+0xd8>)
 8000b74:	f000 fae6 	bl	8001144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020800 	.word	0x40020800

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd6:	2007      	movs	r0, #7
 8000bd8:	f000 fa80 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	@ (8000c6c <HAL_SPI_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12b      	bne.n	8000c62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a17      	ldr	r2, [pc, #92]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a10      	ldr	r2, [pc, #64]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c42:	2338      	movs	r3, #56	@ 0x38
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c52:	2306      	movs	r3, #6
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c5e:	f000 fa71 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40003c00 	.word	0x40003c00
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020400 	.word	0x40020400

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	@ (8000cfc <HAL_UART_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12b      	bne.n	8000cf2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a17      	ldr	r2, [pc, #92]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cee:	f000 fa29 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <NMI_Handler+0x4>

08000d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <MemManage_Handler+0x4>

08000d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5e:	f000 f8c7 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f002 fa14 	bl	80031c4 <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20020000 	.word	0x20020000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	20000118 	.word	0x20000118
 8000dd0:	20000268 	.word	0x20000268

08000dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfc:	f7ff ffea 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	@ (8000e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	@ (8000e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f002 f9d3 	bl	80031d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fba1 	bl	8000570 <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e3c:	08003b58 	.word	0x08003b58
  ldr r2, =_sbss
 8000e40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e44:	20000268 	.word	0x20000268

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f931 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fe8a 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f93b 	bl	800112a <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f911 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	@ (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	2000011c 	.word	0x2000011c

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000011c 	.word	0x2000011c

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff5c 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffb0 	bl	8001098 <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	@ 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e159      	b.n	8001414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 8148 	bne.w	800140e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d005      	beq.n	8001196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	2b02      	cmp	r3, #2
 8001194:	d130      	bne.n	80011f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 0201 	and.w	r2, r3, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b03      	cmp	r3, #3
 8001202:	d017      	beq.n	8001234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d123      	bne.n	8001288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	08da      	lsrs	r2, r3, #3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3208      	adds	r2, #8
 8001248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	69b9      	ldr	r1, [r7, #24]
 8001284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0203 	and.w	r2, r3, #3
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80a2 	beq.w	800140e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b57      	ldr	r3, [pc, #348]	@ (800142c <HAL_GPIO_Init+0x2e8>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a56      	ldr	r2, [pc, #344]	@ (800142c <HAL_GPIO_Init+0x2e8>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b54      	ldr	r3, [pc, #336]	@ (800142c <HAL_GPIO_Init+0x2e8>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e6:	4a52      	ldr	r2, [pc, #328]	@ (8001430 <HAL_GPIO_Init+0x2ec>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a49      	ldr	r2, [pc, #292]	@ (8001434 <HAL_GPIO_Init+0x2f0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x202>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a48      	ldr	r2, [pc, #288]	@ (8001438 <HAL_GPIO_Init+0x2f4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x1fe>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a47      	ldr	r2, [pc, #284]	@ (800143c <HAL_GPIO_Init+0x2f8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x1fa>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a46      	ldr	r2, [pc, #280]	@ (8001440 <HAL_GPIO_Init+0x2fc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x1f6>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a45      	ldr	r2, [pc, #276]	@ (8001444 <HAL_GPIO_Init+0x300>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x1f2>
 8001332:	2304      	movs	r3, #4
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x204>
 8001336:	2307      	movs	r3, #7
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x204>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x204>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x204>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x204>
 8001346:	2300      	movs	r3, #0
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001358:	4935      	ldr	r1, [pc, #212]	@ (8001430 <HAL_GPIO_Init+0x2ec>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <HAL_GPIO_Init+0x304>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a2f      	ldr	r2, [pc, #188]	@ (8001448 <HAL_GPIO_Init+0x304>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b2d      	ldr	r3, [pc, #180]	@ (8001448 <HAL_GPIO_Init+0x304>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a24      	ldr	r2, [pc, #144]	@ (8001448 <HAL_GPIO_Init+0x304>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ba:	4b23      	ldr	r3, [pc, #140]	@ (8001448 <HAL_GPIO_Init+0x304>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013de:	4a1a      	ldr	r2, [pc, #104]	@ (8001448 <HAL_GPIO_Init+0x304>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e4:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <HAL_GPIO_Init+0x304>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001408:	4a0f      	ldr	r2, [pc, #60]	@ (8001448 <HAL_GPIO_Init+0x304>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f aea2 	bls.w	8001160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3724      	adds	r7, #36	@ 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40013c00 	.word	0x40013c00

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001468:	e003      	b.n	8001472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e267      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d075      	beq.n	800158a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149e:	4b88      	ldr	r3, [pc, #544]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d00c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014aa:	4b85      	ldr	r3, [pc, #532]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d112      	bne.n	80014dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b6:	4b82      	ldr	r3, [pc, #520]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014c2:	d10b      	bne.n	80014dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	4b7e      	ldr	r3, [pc, #504]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d05b      	beq.n	8001588 <HAL_RCC_OscConfig+0x108>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d157      	bne.n	8001588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e242      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e4:	d106      	bne.n	80014f4 <HAL_RCC_OscConfig+0x74>
 80014e6:	4b76      	ldr	r3, [pc, #472]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a75      	ldr	r2, [pc, #468]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e01d      	b.n	8001530 <HAL_RCC_OscConfig+0xb0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x98>
 80014fe:	4b70      	ldr	r3, [pc, #448]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6f      	ldr	r2, [pc, #444]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b6d      	ldr	r3, [pc, #436]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6c      	ldr	r2, [pc, #432]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0xb0>
 8001518:	4b69      	ldr	r3, [pc, #420]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a68      	ldr	r2, [pc, #416]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 800151e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b66      	ldr	r3, [pc, #408]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a65      	ldr	r2, [pc, #404]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 800152a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fcee 	bl	8000f18 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fcea 	bl	8000f18 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	@ 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e207      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b5b      	ldr	r3, [pc, #364]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0xc0>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fcda 	bl	8000f18 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fcd6 	bl	8000f18 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	@ 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1f3      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	4b51      	ldr	r3, [pc, #324]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0xe8>
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d063      	beq.n	800165e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001596:	4b4a      	ldr	r3, [pc, #296]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a2:	4b47      	ldr	r3, [pc, #284]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d11c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ae:	4b44      	ldr	r3, [pc, #272]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d116      	bne.n	80015e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	4b41      	ldr	r3, [pc, #260]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x152>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e1c7      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d2:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4937      	ldr	r1, [pc, #220]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	e03a      	b.n	800165e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d020      	beq.n	8001632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f0:	4b34      	ldr	r3, [pc, #208]	@ (80016c4 <HAL_RCC_OscConfig+0x244>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fc8f 	bl	8000f18 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fc8b 	bl	8000f18 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e1a8      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b28      	ldr	r3, [pc, #160]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4925      	ldr	r1, [pc, #148]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 800162c:	4313      	orrs	r3, r2
 800162e:	600b      	str	r3, [r1, #0]
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <HAL_RCC_OscConfig+0x244>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fc6e 	bl	8000f18 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff fc6a 	bl	8000f18 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e187      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d036      	beq.n	80016d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d016      	beq.n	80016a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_RCC_OscConfig+0x248>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fc4e 	bl	8000f18 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fc4a 	bl	8000f18 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e167      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x200>
 800169e:	e01b      	b.n	80016d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <HAL_RCC_OscConfig+0x248>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fc37 	bl	8000f18 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	e00e      	b.n	80016cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff fc33 	bl	8000f18 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d907      	bls.n	80016cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e150      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
 80016c0:	40023800 	.word	0x40023800
 80016c4:	42470000 	.word	0x42470000
 80016c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	4b88      	ldr	r3, [pc, #544]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ea      	bne.n	80016ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8097 	beq.w	8001814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ea:	4b81      	ldr	r3, [pc, #516]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10f      	bne.n	8001716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b7d      	ldr	r3, [pc, #500]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a7c      	ldr	r2, [pc, #496]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40
 8001706:	4b7a      	ldr	r3, [pc, #488]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001712:	2301      	movs	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	4b77      	ldr	r3, [pc, #476]	@ (80018f4 <HAL_RCC_OscConfig+0x474>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d118      	bne.n	8001754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001722:	4b74      	ldr	r3, [pc, #464]	@ (80018f4 <HAL_RCC_OscConfig+0x474>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a73      	ldr	r2, [pc, #460]	@ (80018f4 <HAL_RCC_OscConfig+0x474>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172e:	f7ff fbf3 	bl	8000f18 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001736:	f7ff fbef 	bl	8000f18 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e10c      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	4b6a      	ldr	r3, [pc, #424]	@ (80018f4 <HAL_RCC_OscConfig+0x474>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x2ea>
 800175c:	4b64      	ldr	r3, [pc, #400]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001760:	4a63      	ldr	r2, [pc, #396]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	@ 0x70
 8001768:	e01c      	b.n	80017a4 <HAL_RCC_OscConfig+0x324>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x30c>
 8001772:	4b5f      	ldr	r3, [pc, #380]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	4a5e      	ldr	r2, [pc, #376]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6713      	str	r3, [r2, #112]	@ 0x70
 800177e:	4b5c      	ldr	r3, [pc, #368]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001782:	4a5b      	ldr	r2, [pc, #364]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6713      	str	r3, [r2, #112]	@ 0x70
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0x324>
 800178c:	4b58      	ldr	r3, [pc, #352]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001790:	4a57      	ldr	r2, [pc, #348]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	@ 0x70
 8001798:	4b55      	ldr	r3, [pc, #340]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179c:	4a54      	ldr	r2, [pc, #336]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 800179e:	f023 0304 	bic.w	r3, r3, #4
 80017a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d015      	beq.n	80017d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fbb4 	bl	8000f18 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff fbb0 	bl	8000f18 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0cb      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ca:	4b49      	ldr	r3, [pc, #292]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0ee      	beq.n	80017b4 <HAL_RCC_OscConfig+0x334>
 80017d6:	e014      	b.n	8001802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fb9e 	bl	8000f18 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff fb9a 	bl	8000f18 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0b5      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f6:	4b3e      	ldr	r3, [pc, #248]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ee      	bne.n	80017e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001808:	4b39      	ldr	r3, [pc, #228]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	4a38      	ldr	r2, [pc, #224]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 800180e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a1 	beq.w	8001960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800181e:	4b34      	ldr	r3, [pc, #208]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b08      	cmp	r3, #8
 8001828:	d05c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d141      	bne.n	80018b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b31      	ldr	r3, [pc, #196]	@ (80018f8 <HAL_RCC_OscConfig+0x478>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fb6e 	bl	8000f18 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fb6a 	bl	8000f18 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e087      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	3b01      	subs	r3, #1
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	491b      	ldr	r1, [pc, #108]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_RCC_OscConfig+0x478>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fb43 	bl	8000f18 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff fb3f 	bl	8000f18 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e05c      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x416>
 80018b4:	e054      	b.n	8001960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_RCC_OscConfig+0x478>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb2c 	bl	8000f18 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fb28 	bl	8000f18 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e045      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_RCC_OscConfig+0x470>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x444>
 80018e2:	e03d      	b.n	8001960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e038      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000
 80018f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_RCC_OscConfig+0x4ec>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d028      	beq.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d121      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d11a      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001934:	4293      	cmp	r3, r2
 8001936:	d111      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d107      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0cc      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b68      	ldr	r3, [pc, #416]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d90c      	bls.n	80019ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b65      	ldr	r3, [pc, #404]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b63      	ldr	r3, [pc, #396]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0b8      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c4:	4b59      	ldr	r3, [pc, #356]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a58      	ldr	r2, [pc, #352]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a52      	ldr	r2, [pc, #328]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b50      	ldr	r3, [pc, #320]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	494d      	ldr	r1, [pc, #308]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d044      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d119      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e07f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e067      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b37      	ldr	r3, [pc, #220]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4934      	ldr	r1, [pc, #208]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a60:	f7ff fa5a 	bl	8000f18 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff fa56 	bl	8000f18 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e04f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d20c      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e032      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4916      	ldr	r1, [pc, #88]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	490e      	ldr	r1, [pc, #56]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001af6:	f000 f821 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	490a      	ldr	r1, [pc, #40]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	4a09      	ldr	r2, [pc, #36]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f9ba 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	08003afc 	.word	0x08003afc
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b40:	b094      	sub	sp, #80	@ 0x50
 8001b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b48:	2300      	movs	r3, #0
 8001b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b54:	4b79      	ldr	r3, [pc, #484]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d00d      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x40>
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	f200 80e1 	bhi.w	8001d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x34>
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b6e:	e0db      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b73      	ldr	r3, [pc, #460]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b72:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b74:	e0db      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b76:	4b73      	ldr	r3, [pc, #460]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b7a:	e0d8      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b84:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b86:	4b6d      	ldr	r3, [pc, #436]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b92:	4b6a      	ldr	r3, [pc, #424]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	2200      	movs	r2, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bae:	4622      	mov	r2, r4
 8001bb0:	462b      	mov	r3, r5
 8001bb2:	f04f 0000 	mov.w	r0, #0
 8001bb6:	f04f 0100 	mov.w	r1, #0
 8001bba:	0159      	lsls	r1, r3, #5
 8001bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc0:	0150      	lsls	r0, r2, #5
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	1a51      	subs	r1, r2, r1
 8001bca:	6139      	str	r1, [r7, #16]
 8001bcc:	4629      	mov	r1, r5
 8001bce:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001be0:	4659      	mov	r1, fp
 8001be2:	018b      	lsls	r3, r1, #6
 8001be4:	4651      	mov	r1, sl
 8001be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bea:	4651      	mov	r1, sl
 8001bec:	018a      	lsls	r2, r1, #6
 8001bee:	4651      	mov	r1, sl
 8001bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8001bf4:	4659      	mov	r1, fp
 8001bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c0e:	4690      	mov	r8, r2
 8001c10:	4699      	mov	r9, r3
 8001c12:	4623      	mov	r3, r4
 8001c14:	eb18 0303 	adds.w	r3, r8, r3
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	462b      	mov	r3, r5
 8001c1c:	eb49 0303 	adc.w	r3, r9, r3
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c2e:	4629      	mov	r1, r5
 8001c30:	024b      	lsls	r3, r1, #9
 8001c32:	4621      	mov	r1, r4
 8001c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c38:	4621      	mov	r1, r4
 8001c3a:	024a      	lsls	r2, r1, #9
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c42:	2200      	movs	r2, #0
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c4c:	f7fe fb18 	bl	8000280 <__aeabi_uldivmod>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4613      	mov	r3, r2
 8001c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c58:	e058      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5a:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	099b      	lsrs	r3, r3, #6
 8001c60:	2200      	movs	r2, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	4611      	mov	r1, r2
 8001c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c6a:	623b      	str	r3, [r7, #32]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c74:	4642      	mov	r2, r8
 8001c76:	464b      	mov	r3, r9
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	0159      	lsls	r1, r3, #5
 8001c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c86:	0150      	lsls	r0, r2, #5
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c92:	4649      	mov	r1, r9
 8001c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cac:	ebb2 040a 	subs.w	r4, r2, sl
 8001cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	00eb      	lsls	r3, r5, #3
 8001cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cc2:	00e2      	lsls	r2, r4, #3
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	4643      	mov	r3, r8
 8001cca:	18e3      	adds	r3, r4, r3
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	464b      	mov	r3, r9
 8001cd0:	eb45 0303 	adc.w	r3, r5, r3
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	028b      	lsls	r3, r1, #10
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cec:	4621      	mov	r1, r4
 8001cee:	028a      	lsls	r2, r1, #10
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	61fa      	str	r2, [r7, #28]
 8001cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d00:	f7fe fabe 	bl	8000280 <__aeabi_uldivmod>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4613      	mov	r3, r2
 8001d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	3301      	adds	r3, #1
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001d1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d26:	e002      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3750      	adds	r7, #80	@ 0x50
 8001d34:	46bd      	mov	sp, r7
 8001d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	00f42400 	.word	0x00f42400
 8001d44:	007a1200 	.word	0x007a1200

08001d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000000 	.word	0x20000000

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4903      	ldr	r1, [pc, #12]	@ (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	08003b0c 	.word	0x08003b0c

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d8c:	f7ff ffdc 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4903      	ldr	r1, [pc, #12]	@ (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	08003b0c 	.word	0x08003b0c

08001db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e07b      	b.n	8001eba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d108      	bne.n	8001ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dd2:	d009      	beq.n	8001de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
 8001dda:	e005      	b.n	8001de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fef0 	bl	8000be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6c:	ea42 0103 	orr.w	r1, r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 0104 	and.w	r1, r3, #4
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	f003 0210 	and.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b088      	sub	sp, #32
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_SPI_Transmit+0x22>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e12d      	b.n	8002140 <HAL_SPI_Transmit+0x27e>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eec:	f7ff f814 	bl	8000f18 <HAL_GetTick>
 8001ef0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d002      	beq.n	8001f08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
 8001f04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f06:	e116      	b.n	8002136 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <HAL_SPI_Transmit+0x52>
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f18:	e10d      	b.n	8002136 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	88fa      	ldrh	r2, [r7, #6]
 8001f32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	88fa      	ldrh	r2, [r7, #6]
 8001f38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f60:	d10f      	bne.n	8001f82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8c:	2b40      	cmp	r3, #64	@ 0x40
 8001f8e:	d007      	beq.n	8001fa0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fa8:	d14f      	bne.n	800204a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_SPI_Transmit+0xf6>
 8001fb2:	8afb      	ldrh	r3, [r7, #22]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d142      	bne.n	800203e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	881a      	ldrh	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	1c9a      	adds	r2, r3, #2
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fdc:	e02f      	b.n	800203e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d112      	bne.n	8002012 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	1c9a      	adds	r2, r3, #2
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002010:	e015      	b.n	800203e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002012:	f7fe ff81 	bl	8000f18 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d803      	bhi.n	800202a <HAL_SPI_Transmit+0x168>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d102      	bne.n	8002030 <HAL_SPI_Transmit+0x16e>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d106      	bne.n	800203e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800203c:	e07b      	b.n	8002136 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ca      	bne.n	8001fde <HAL_SPI_Transmit+0x11c>
 8002048:	e050      	b.n	80020ec <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_SPI_Transmit+0x196>
 8002052:	8afb      	ldrh	r3, [r7, #22]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d144      	bne.n	80020e2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	330c      	adds	r3, #12
 8002062:	7812      	ldrb	r2, [r2, #0]
 8002064:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800207e:	e030      	b.n	80020e2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d113      	bne.n	80020b6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	330c      	adds	r3, #12
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020b4:	e015      	b.n	80020e2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020b6:	f7fe ff2f 	bl	8000f18 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d803      	bhi.n	80020ce <HAL_SPI_Transmit+0x20c>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d102      	bne.n	80020d4 <HAL_SPI_Transmit+0x212>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80020e0:	e029      	b.n	8002136 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1c9      	bne.n	8002080 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fbdf 	bl	80028b4 <SPI_EndRxTxTransaction>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	77fb      	strb	r3, [r7, #31]
 800212c:	e003      	b.n	8002136 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800213e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d002      	beq.n	800216e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002168:	2302      	movs	r3, #2
 800216a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800216c:	e0fb      	b.n	8002366 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002176:	d112      	bne.n	800219e <HAL_SPI_Receive+0x56>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10e      	bne.n	800219e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2204      	movs	r2, #4
 8002184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f8ef 	bl	8002378 <HAL_SPI_TransmitReceive>
 800219a:	4603      	mov	r3, r0
 800219c:	e0e8      	b.n	8002370 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_SPI_Receive+0x64>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e0e1      	b.n	8002370 <HAL_SPI_Receive+0x228>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b4:	f7fe feb0 	bl	8000f18 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_SPI_Receive+0x7e>
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021ca:	e0cc      	b.n	8002366 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2204      	movs	r2, #4
 80021d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	88fa      	ldrh	r2, [r7, #6]
 80021e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	88fa      	ldrh	r2, [r7, #6]
 80021ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002212:	d10f      	bne.n	8002234 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002222:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223e:	2b40      	cmp	r3, #64	@ 0x40
 8002240:	d007      	beq.n	8002252 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d16a      	bne.n	8002330 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800225a:	e032      	b.n	80022c2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d115      	bne.n	8002296 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f103 020c 	add.w	r2, r3, #12
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002294:	e015      	b.n	80022c2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002296:	f7fe fe3f 	bl	8000f18 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d803      	bhi.n	80022ae <HAL_SPI_Receive+0x166>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d102      	bne.n	80022b4 <HAL_SPI_Receive+0x16c>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80022c0:	e051      	b.n	8002366 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1c7      	bne.n	800225c <HAL_SPI_Receive+0x114>
 80022cc:	e035      	b.n	800233a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d113      	bne.n	8002304 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e6:	b292      	uxth	r2, r2
 80022e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ee:	1c9a      	adds	r2, r3, #2
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002302:	e015      	b.n	8002330 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002304:	f7fe fe08 	bl	8000f18 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d803      	bhi.n	800231c <HAL_SPI_Receive+0x1d4>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d102      	bne.n	8002322 <HAL_SPI_Receive+0x1da>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800232e:	e01a      	b.n	8002366 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1c9      	bne.n	80022ce <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fa52 	bl	80027e8 <SPI_EndRxTransaction>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	75fb      	strb	r3, [r7, #23]
 800235c:	e003      	b.n	8002366 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800236e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	@ 0x30
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002386:	2301      	movs	r3, #1
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_SPI_TransmitReceive+0x26>
 800239a:	2302      	movs	r3, #2
 800239c:	e198      	b.n	80026d0 <HAL_SPI_TransmitReceive+0x358>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023a6:	f7fe fdb7 	bl	8000f18 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d00f      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x70>
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023ce:	d107      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x68>
 80023d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d003      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023e0:	2302      	movs	r3, #2
 80023e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80023e6:	e16d      	b.n	80026c4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x82>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x82>
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002400:	e160      	b.n	80026c4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2205      	movs	r2, #5
 8002412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	887a      	ldrh	r2, [r7, #2]
 800243e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002456:	2b40      	cmp	r3, #64	@ 0x40
 8002458:	d007      	beq.n	800246a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002472:	d17c      	bne.n	800256e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x10a>
 800247c:	8b7b      	ldrh	r3, [r7, #26]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d16a      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	1c9a      	adds	r2, r3, #2
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a6:	e057      	b.n	8002558 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d11b      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x176>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d016      	beq.n	80024ee <HAL_SPI_TransmitReceive+0x176>
 80024c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d113      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	881a      	ldrh	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	1c9a      	adds	r2, r3, #2
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d119      	bne.n	8002530 <HAL_SPI_TransmitReceive+0x1b8>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d014      	beq.n	8002530 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002510:	b292      	uxth	r2, r2
 8002512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002518:	1c9a      	adds	r2, r3, #2
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800252c:	2301      	movs	r3, #1
 800252e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002530:	f7fe fcf2 	bl	8000f18 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800253c:	429a      	cmp	r2, r3
 800253e:	d80b      	bhi.n	8002558 <HAL_SPI_TransmitReceive+0x1e0>
 8002540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002546:	d007      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002556:	e0b5      	b.n	80026c4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1a2      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x130>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d19d      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x130>
 800256c:	e080      	b.n	8002670 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_SPI_TransmitReceive+0x204>
 8002576:	8b7b      	ldrh	r3, [r7, #26]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d16f      	bne.n	800265c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a2:	e05b      	b.n	800265c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d11c      	bne.n	80025ec <HAL_SPI_TransmitReceive+0x274>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d017      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x274>
 80025bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d114      	bne.n	80025ec <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d119      	bne.n	800262e <HAL_SPI_TransmitReceive+0x2b6>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d014      	beq.n	800262e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800262a:	2301      	movs	r3, #1
 800262c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800262e:	f7fe fc73 	bl	8000f18 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800263a:	429a      	cmp	r2, r3
 800263c:	d803      	bhi.n	8002646 <HAL_SPI_TransmitReceive+0x2ce>
 800263e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d102      	bne.n	800264c <HAL_SPI_TransmitReceive+0x2d4>
 8002646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002648:	2b00      	cmp	r3, #0
 800264a:	d107      	bne.n	800265c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800265a:	e033      	b.n	80026c4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d19e      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x22c>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d199      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002672:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f91d 	bl	80028b4 <SPI_EndRxTxTransaction>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d006      	beq.n	800268e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800268c:	e01a      	b.n	80026c4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026ba:	e003      	b.n	80026c4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80026cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3730      	adds	r7, #48	@ 0x30
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026e8:	f7fe fc16 	bl	8000f18 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026f8:	f7fe fc0e 	bl	8000f18 <HAL_GetTick>
 80026fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026fe:	4b39      	ldr	r3, [pc, #228]	@ (80027e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	015b      	lsls	r3, r3, #5
 8002704:	0d1b      	lsrs	r3, r3, #20
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	fb02 f303 	mul.w	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800270e:	e054      	b.n	80027ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002716:	d050      	beq.n	80027ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002718:	f7fe fbfe 	bl	8000f18 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	429a      	cmp	r2, r3
 8002726:	d902      	bls.n	800272e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d13d      	bne.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800273c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002746:	d111      	bne.n	800276c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002750:	d004      	beq.n	800275c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800275a:	d107      	bne.n	800276c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800276a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002774:	d10f      	bne.n	8002796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e017      	b.n	80027da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4013      	ands	r3, r2
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	bf0c      	ite	eq
 80027ca:	2301      	moveq	r3, #1
 80027cc:	2300      	movne	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d19b      	bne.n	8002710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000

080027e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027fc:	d111      	bne.n	8002822 <SPI_EndRxTransaction+0x3a>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002806:	d004      	beq.n	8002812 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002810:	d107      	bne.n	8002822 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800282a:	d12a      	bne.n	8002882 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002834:	d012      	beq.n	800285c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	2180      	movs	r1, #128	@ 0x80
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7ff ff49 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02d      	beq.n	80028a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e026      	b.n	80028aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2200      	movs	r2, #0
 8002864:	2101      	movs	r1, #1
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7ff ff36 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01a      	beq.n	80028a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	f043 0220 	orr.w	r2, r3, #32
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e013      	b.n	80028aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2200      	movs	r2, #0
 800288a:	2101      	movs	r1, #1
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff ff23 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e000      	b.n	80028aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2201      	movs	r2, #1
 80028c8:	2102      	movs	r1, #2
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff ff04 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e032      	b.n	800294c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <SPI_EndRxTxTransaction+0xa0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002958 <SPI_EndRxTxTransaction+0xa4>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	0d5b      	lsrs	r3, r3, #21
 80028f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002904:	d112      	bne.n	800292c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2200      	movs	r2, #0
 800290e:	2180      	movs	r1, #128	@ 0x80
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff fee1 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d016      	beq.n	800294a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e00f      	b.n	800294c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3b01      	subs	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002942:	2b80      	cmp	r3, #128	@ 0x80
 8002944:	d0f2      	beq.n	800292c <SPI_EndRxTxTransaction+0x78>
 8002946:	e000      	b.n	800294a <SPI_EndRxTxTransaction+0x96>
        break;
 8002948:	bf00      	nop
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000000 	.word	0x20000000
 8002958:	165e9f81 	.word	0x165e9f81

0800295c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e042      	b.n	80029f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe f978 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	@ 0x24
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800299e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f973 	bl	8002c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	@ 0x28
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d175      	bne.n	8002b08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_UART_Transmit+0x2c>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e06e      	b.n	8002b0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2221      	movs	r2, #33	@ 0x21
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a3a:	f7fe fa6d 	bl	8000f18 <HAL_GetTick>
 8002a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a54:	d108      	bne.n	8002a68 <HAL_UART_Transmit+0x6c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	e003      	b.n	8002a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a70:	e02e      	b.n	8002ad0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2180      	movs	r1, #128	@ 0x80
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f848 	bl	8002b12 <UART_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e03a      	b.n	8002b0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	3302      	adds	r3, #2
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e007      	b.n	8002ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1cb      	bne.n	8002a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2140      	movs	r1, #64	@ 0x40
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f814 	bl	8002b12 <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e006      	b.n	8002b0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e000      	b.n	8002b0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b22:	e03b      	b.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d037      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7fe f9f4 	bl	8000f18 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	6a3a      	ldr	r2, [r7, #32]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e03a      	b.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d023      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b80      	cmp	r3, #128	@ 0x80
 8002b58:	d020      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d01d      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d116      	bne.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f81d 	bl	8002bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e00f      	b.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d0b4      	beq.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b095      	sub	sp, #84	@ 0x54
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bec:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bf4:	e841 2300 	strex	r3, r2, [r1]
 8002bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e5      	bne.n	8002bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3314      	adds	r3, #20
 8002c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e5      	bne.n	8002c00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d119      	bne.n	8002c70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f023 0310 	bic.w	r3, r3, #16
 8002c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c5c:	61ba      	str	r2, [r7, #24]
 8002c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	6979      	ldr	r1, [r7, #20]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	613b      	str	r3, [r7, #16]
   return(result);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c7e:	bf00      	nop
 8002c80:	3754      	adds	r7, #84	@ 0x54
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c90:	b0c0      	sub	sp, #256	@ 0x100
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	ea40 0301 	orr.w	r3, r0, r1
 8002cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ce4:	f021 010c 	bic.w	r1, r1, #12
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d06:	6999      	ldr	r1, [r3, #24]
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	ea40 0301 	orr.w	r3, r0, r1
 8002d12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d005      	beq.n	8002d2c <UART_SetConfig+0xa0>
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b8d      	ldr	r3, [pc, #564]	@ (8002f5c <UART_SetConfig+0x2d0>)
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d104      	bne.n	8002d36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d2c:	f7ff f82c 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8002d30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d34:	e003      	b.n	8002d3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d36:	f7ff f813 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8002d3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d48:	f040 810c 	bne.w	8002f64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d5e:	4622      	mov	r2, r4
 8002d60:	462b      	mov	r3, r5
 8002d62:	1891      	adds	r1, r2, r2
 8002d64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d66:	415b      	adcs	r3, r3
 8002d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d6e:	4621      	mov	r1, r4
 8002d70:	eb12 0801 	adds.w	r8, r2, r1
 8002d74:	4629      	mov	r1, r5
 8002d76:	eb43 0901 	adc.w	r9, r3, r1
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d8e:	4690      	mov	r8, r2
 8002d90:	4699      	mov	r9, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	eb18 0303 	adds.w	r3, r8, r3
 8002d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d9c:	462b      	mov	r3, r5
 8002d9e:	eb49 0303 	adc.w	r3, r9, r3
 8002da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002db2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dba:	460b      	mov	r3, r1
 8002dbc:	18db      	adds	r3, r3, r3
 8002dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	eb42 0303 	adc.w	r3, r2, r3
 8002dc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dd0:	f7fd fa56 	bl	8000280 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4b61      	ldr	r3, [pc, #388]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002dda:	fba3 2302 	umull	r2, r3, r3, r2
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	011c      	lsls	r4, r3, #4
 8002de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002df0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	1891      	adds	r1, r2, r2
 8002dfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002dfc:	415b      	adcs	r3, r3
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e04:	4641      	mov	r1, r8
 8002e06:	eb12 0a01 	adds.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e24:	4692      	mov	sl, r2
 8002e26:	469b      	mov	fp, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e32:	464b      	mov	r3, r9
 8002e34:	eb4b 0303 	adc.w	r3, fp, r3
 8002e38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e50:	460b      	mov	r3, r1
 8002e52:	18db      	adds	r3, r3, r3
 8002e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e56:	4613      	mov	r3, r2
 8002e58:	eb42 0303 	adc.w	r3, r2, r3
 8002e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e66:	f7fd fa0b 	bl	8000280 <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4b3b      	ldr	r3, [pc, #236]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002e72:	fba3 2301 	umull	r2, r3, r3, r1
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2264      	movs	r2, #100	@ 0x64
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	1acb      	subs	r3, r1, r3
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e86:	4b36      	ldr	r3, [pc, #216]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002e88:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e94:	441c      	add	r4, r3
 8002e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ea4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	1891      	adds	r1, r2, r2
 8002eae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002eb0:	415b      	adcs	r3, r3
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002eb8:	4641      	mov	r1, r8
 8002eba:	1851      	adds	r1, r2, r1
 8002ebc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	414b      	adcs	r3, r1
 8002ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	00cb      	lsls	r3, r1, #3
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eda:	4651      	mov	r1, sl
 8002edc:	00ca      	lsls	r2, r1, #3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002eec:	464b      	mov	r3, r9
 8002eee:	460a      	mov	r2, r1
 8002ef0:	eb42 0303 	adc.w	r3, r2, r3
 8002ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	18db      	adds	r3, r3, r3
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f12:	4613      	mov	r3, r2
 8002f14:	eb42 0303 	adc.w	r3, r2, r3
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f22:	f7fd f9ad 	bl	8000280 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2164      	movs	r1, #100	@ 0x64
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	3332      	adds	r3, #50	@ 0x32
 8002f3e:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	f003 0207 	and.w	r2, r3, #7
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4422      	add	r2, r4
 8002f52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f54:	e106      	b.n	8003164 <UART_SetConfig+0x4d8>
 8002f56:	bf00      	nop
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40011400 	.word	0x40011400
 8002f60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f76:	4642      	mov	r2, r8
 8002f78:	464b      	mov	r3, r9
 8002f7a:	1891      	adds	r1, r2, r2
 8002f7c:	6239      	str	r1, [r7, #32]
 8002f7e:	415b      	adcs	r3, r3
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f86:	4641      	mov	r1, r8
 8002f88:	1854      	adds	r4, r2, r1
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	eb43 0501 	adc.w	r5, r3, r1
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	00eb      	lsls	r3, r5, #3
 8002f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f9e:	00e2      	lsls	r2, r4, #3
 8002fa0:	4614      	mov	r4, r2
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	4643      	mov	r3, r8
 8002fa6:	18e3      	adds	r3, r4, r3
 8002fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fac:	464b      	mov	r3, r9
 8002fae:	eb45 0303 	adc.w	r3, r5, r3
 8002fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	008b      	lsls	r3, r1, #2
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fdc:	4621      	mov	r1, r4
 8002fde:	008a      	lsls	r2, r1, #2
 8002fe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fe4:	f7fd f94c 	bl	8000280 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4b60      	ldr	r3, [pc, #384]	@ (8003170 <UART_SetConfig+0x4e4>)
 8002fee:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	011c      	lsls	r4, r3, #4
 8002ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003000:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	61b9      	str	r1, [r7, #24]
 8003010:	415b      	adcs	r3, r3
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003018:	4641      	mov	r1, r8
 800301a:	1851      	adds	r1, r2, r1
 800301c:	6139      	str	r1, [r7, #16]
 800301e:	4649      	mov	r1, r9
 8003020:	414b      	adcs	r3, r1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003030:	4659      	mov	r1, fp
 8003032:	00cb      	lsls	r3, r1, #3
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303a:	4651      	mov	r1, sl
 800303c:	00ca      	lsls	r2, r1, #3
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	4603      	mov	r3, r0
 8003044:	4642      	mov	r2, r8
 8003046:	189b      	adds	r3, r3, r2
 8003048:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800304c:	464b      	mov	r3, r9
 800304e:	460a      	mov	r2, r1
 8003050:	eb42 0303 	adc.w	r3, r2, r3
 8003054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003062:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003070:	4649      	mov	r1, r9
 8003072:	008b      	lsls	r3, r1, #2
 8003074:	4641      	mov	r1, r8
 8003076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307a:	4641      	mov	r1, r8
 800307c:	008a      	lsls	r2, r1, #2
 800307e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003082:	f7fd f8fd 	bl	8000280 <__aeabi_uldivmod>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4611      	mov	r1, r2
 800308c:	4b38      	ldr	r3, [pc, #224]	@ (8003170 <UART_SetConfig+0x4e4>)
 800308e:	fba3 2301 	umull	r2, r3, r3, r1
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2264      	movs	r2, #100	@ 0x64
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	1acb      	subs	r3, r1, r3
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	3332      	adds	r3, #50	@ 0x32
 80030a0:	4a33      	ldr	r2, [pc, #204]	@ (8003170 <UART_SetConfig+0x4e4>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ac:	441c      	add	r4, r3
 80030ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b2:	2200      	movs	r2, #0
 80030b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80030b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80030b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	1891      	adds	r1, r2, r2
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	415b      	adcs	r3, r3
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030cc:	4641      	mov	r1, r8
 80030ce:	1851      	adds	r1, r2, r1
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	4649      	mov	r1, r9
 80030d4:	414b      	adcs	r3, r1
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030e4:	4659      	mov	r1, fp
 80030e6:	00cb      	lsls	r3, r1, #3
 80030e8:	4651      	mov	r1, sl
 80030ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ee:	4651      	mov	r1, sl
 80030f0:	00ca      	lsls	r2, r1, #3
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	4642      	mov	r2, r8
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030fe:	464b      	mov	r3, r9
 8003100:	460a      	mov	r2, r1
 8003102:	eb42 0303 	adc.w	r3, r2, r3
 8003106:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	663b      	str	r3, [r7, #96]	@ 0x60
 8003112:	667a      	str	r2, [r7, #100]	@ 0x64
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003120:	4649      	mov	r1, r9
 8003122:	008b      	lsls	r3, r1, #2
 8003124:	4641      	mov	r1, r8
 8003126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312a:	4641      	mov	r1, r8
 800312c:	008a      	lsls	r2, r1, #2
 800312e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003132:	f7fd f8a5 	bl	8000280 <__aeabi_uldivmod>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <UART_SetConfig+0x4e4>)
 800313c:	fba3 1302 	umull	r1, r3, r3, r2
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	2164      	movs	r1, #100	@ 0x64
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	3332      	adds	r3, #50	@ 0x32
 800314e:	4a08      	ldr	r2, [pc, #32]	@ (8003170 <UART_SetConfig+0x4e4>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4422      	add	r2, r4
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800316a:	46bd      	mov	sp, r7
 800316c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003170:	51eb851f 	.word	0x51eb851f

08003174 <siprintf>:
 8003174:	b40e      	push	{r1, r2, r3}
 8003176:	b500      	push	{lr}
 8003178:	b09c      	sub	sp, #112	@ 0x70
 800317a:	ab1d      	add	r3, sp, #116	@ 0x74
 800317c:	9002      	str	r0, [sp, #8]
 800317e:	9006      	str	r0, [sp, #24]
 8003180:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003184:	4809      	ldr	r0, [pc, #36]	@ (80031ac <siprintf+0x38>)
 8003186:	9107      	str	r1, [sp, #28]
 8003188:	9104      	str	r1, [sp, #16]
 800318a:	4909      	ldr	r1, [pc, #36]	@ (80031b0 <siprintf+0x3c>)
 800318c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003190:	9105      	str	r1, [sp, #20]
 8003192:	6800      	ldr	r0, [r0, #0]
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	a902      	add	r1, sp, #8
 8003198:	f000 f994 	bl	80034c4 <_svfiprintf_r>
 800319c:	9b02      	ldr	r3, [sp, #8]
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	b01c      	add	sp, #112	@ 0x70
 80031a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031a8:	b003      	add	sp, #12
 80031aa:	4770      	bx	lr
 80031ac:	2000000c 	.word	0x2000000c
 80031b0:	ffff0208 	.word	0xffff0208

080031b4 <memset>:
 80031b4:	4402      	add	r2, r0
 80031b6:	4603      	mov	r3, r0
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d100      	bne.n	80031be <memset+0xa>
 80031bc:	4770      	bx	lr
 80031be:	f803 1b01 	strb.w	r1, [r3], #1
 80031c2:	e7f9      	b.n	80031b8 <memset+0x4>

080031c4 <__errno>:
 80031c4:	4b01      	ldr	r3, [pc, #4]	@ (80031cc <__errno+0x8>)
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	2000000c 	.word	0x2000000c

080031d0 <__libc_init_array>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003208 <__libc_init_array+0x38>)
 80031d4:	4c0d      	ldr	r4, [pc, #52]	@ (800320c <__libc_init_array+0x3c>)
 80031d6:	1b64      	subs	r4, r4, r5
 80031d8:	10a4      	asrs	r4, r4, #2
 80031da:	2600      	movs	r6, #0
 80031dc:	42a6      	cmp	r6, r4
 80031de:	d109      	bne.n	80031f4 <__libc_init_array+0x24>
 80031e0:	4d0b      	ldr	r5, [pc, #44]	@ (8003210 <__libc_init_array+0x40>)
 80031e2:	4c0c      	ldr	r4, [pc, #48]	@ (8003214 <__libc_init_array+0x44>)
 80031e4:	f000 fc66 	bl	8003ab4 <_init>
 80031e8:	1b64      	subs	r4, r4, r5
 80031ea:	10a4      	asrs	r4, r4, #2
 80031ec:	2600      	movs	r6, #0
 80031ee:	42a6      	cmp	r6, r4
 80031f0:	d105      	bne.n	80031fe <__libc_init_array+0x2e>
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
 80031f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f8:	4798      	blx	r3
 80031fa:	3601      	adds	r6, #1
 80031fc:	e7ee      	b.n	80031dc <__libc_init_array+0xc>
 80031fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003202:	4798      	blx	r3
 8003204:	3601      	adds	r6, #1
 8003206:	e7f2      	b.n	80031ee <__libc_init_array+0x1e>
 8003208:	08003b50 	.word	0x08003b50
 800320c:	08003b50 	.word	0x08003b50
 8003210:	08003b50 	.word	0x08003b50
 8003214:	08003b54 	.word	0x08003b54

08003218 <__retarget_lock_acquire_recursive>:
 8003218:	4770      	bx	lr

0800321a <__retarget_lock_release_recursive>:
 800321a:	4770      	bx	lr

0800321c <_free_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4605      	mov	r5, r0
 8003220:	2900      	cmp	r1, #0
 8003222:	d041      	beq.n	80032a8 <_free_r+0x8c>
 8003224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003228:	1f0c      	subs	r4, r1, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	bfb8      	it	lt
 800322e:	18e4      	addlt	r4, r4, r3
 8003230:	f000 f8e0 	bl	80033f4 <__malloc_lock>
 8003234:	4a1d      	ldr	r2, [pc, #116]	@ (80032ac <_free_r+0x90>)
 8003236:	6813      	ldr	r3, [r2, #0]
 8003238:	b933      	cbnz	r3, 8003248 <_free_r+0x2c>
 800323a:	6063      	str	r3, [r4, #4]
 800323c:	6014      	str	r4, [r2, #0]
 800323e:	4628      	mov	r0, r5
 8003240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003244:	f000 b8dc 	b.w	8003400 <__malloc_unlock>
 8003248:	42a3      	cmp	r3, r4
 800324a:	d908      	bls.n	800325e <_free_r+0x42>
 800324c:	6820      	ldr	r0, [r4, #0]
 800324e:	1821      	adds	r1, r4, r0
 8003250:	428b      	cmp	r3, r1
 8003252:	bf01      	itttt	eq
 8003254:	6819      	ldreq	r1, [r3, #0]
 8003256:	685b      	ldreq	r3, [r3, #4]
 8003258:	1809      	addeq	r1, r1, r0
 800325a:	6021      	streq	r1, [r4, #0]
 800325c:	e7ed      	b.n	800323a <_free_r+0x1e>
 800325e:	461a      	mov	r2, r3
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	b10b      	cbz	r3, 8003268 <_free_r+0x4c>
 8003264:	42a3      	cmp	r3, r4
 8003266:	d9fa      	bls.n	800325e <_free_r+0x42>
 8003268:	6811      	ldr	r1, [r2, #0]
 800326a:	1850      	adds	r0, r2, r1
 800326c:	42a0      	cmp	r0, r4
 800326e:	d10b      	bne.n	8003288 <_free_r+0x6c>
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	4401      	add	r1, r0
 8003274:	1850      	adds	r0, r2, r1
 8003276:	4283      	cmp	r3, r0
 8003278:	6011      	str	r1, [r2, #0]
 800327a:	d1e0      	bne.n	800323e <_free_r+0x22>
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	6053      	str	r3, [r2, #4]
 8003282:	4408      	add	r0, r1
 8003284:	6010      	str	r0, [r2, #0]
 8003286:	e7da      	b.n	800323e <_free_r+0x22>
 8003288:	d902      	bls.n	8003290 <_free_r+0x74>
 800328a:	230c      	movs	r3, #12
 800328c:	602b      	str	r3, [r5, #0]
 800328e:	e7d6      	b.n	800323e <_free_r+0x22>
 8003290:	6820      	ldr	r0, [r4, #0]
 8003292:	1821      	adds	r1, r4, r0
 8003294:	428b      	cmp	r3, r1
 8003296:	bf04      	itt	eq
 8003298:	6819      	ldreq	r1, [r3, #0]
 800329a:	685b      	ldreq	r3, [r3, #4]
 800329c:	6063      	str	r3, [r4, #4]
 800329e:	bf04      	itt	eq
 80032a0:	1809      	addeq	r1, r1, r0
 80032a2:	6021      	streq	r1, [r4, #0]
 80032a4:	6054      	str	r4, [r2, #4]
 80032a6:	e7ca      	b.n	800323e <_free_r+0x22>
 80032a8:	bd38      	pop	{r3, r4, r5, pc}
 80032aa:	bf00      	nop
 80032ac:	20000264 	.word	0x20000264

080032b0 <sbrk_aligned>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	4e0f      	ldr	r6, [pc, #60]	@ (80032f0 <sbrk_aligned+0x40>)
 80032b4:	460c      	mov	r4, r1
 80032b6:	6831      	ldr	r1, [r6, #0]
 80032b8:	4605      	mov	r5, r0
 80032ba:	b911      	cbnz	r1, 80032c2 <sbrk_aligned+0x12>
 80032bc:	f000 fba6 	bl	8003a0c <_sbrk_r>
 80032c0:	6030      	str	r0, [r6, #0]
 80032c2:	4621      	mov	r1, r4
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 fba1 	bl	8003a0c <_sbrk_r>
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	d103      	bne.n	80032d6 <sbrk_aligned+0x26>
 80032ce:	f04f 34ff 	mov.w	r4, #4294967295
 80032d2:	4620      	mov	r0, r4
 80032d4:	bd70      	pop	{r4, r5, r6, pc}
 80032d6:	1cc4      	adds	r4, r0, #3
 80032d8:	f024 0403 	bic.w	r4, r4, #3
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d0f8      	beq.n	80032d2 <sbrk_aligned+0x22>
 80032e0:	1a21      	subs	r1, r4, r0
 80032e2:	4628      	mov	r0, r5
 80032e4:	f000 fb92 	bl	8003a0c <_sbrk_r>
 80032e8:	3001      	adds	r0, #1
 80032ea:	d1f2      	bne.n	80032d2 <sbrk_aligned+0x22>
 80032ec:	e7ef      	b.n	80032ce <sbrk_aligned+0x1e>
 80032ee:	bf00      	nop
 80032f0:	20000260 	.word	0x20000260

080032f4 <_malloc_r>:
 80032f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032f8:	1ccd      	adds	r5, r1, #3
 80032fa:	f025 0503 	bic.w	r5, r5, #3
 80032fe:	3508      	adds	r5, #8
 8003300:	2d0c      	cmp	r5, #12
 8003302:	bf38      	it	cc
 8003304:	250c      	movcc	r5, #12
 8003306:	2d00      	cmp	r5, #0
 8003308:	4606      	mov	r6, r0
 800330a:	db01      	blt.n	8003310 <_malloc_r+0x1c>
 800330c:	42a9      	cmp	r1, r5
 800330e:	d904      	bls.n	800331a <_malloc_r+0x26>
 8003310:	230c      	movs	r3, #12
 8003312:	6033      	str	r3, [r6, #0]
 8003314:	2000      	movs	r0, #0
 8003316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800331a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033f0 <_malloc_r+0xfc>
 800331e:	f000 f869 	bl	80033f4 <__malloc_lock>
 8003322:	f8d8 3000 	ldr.w	r3, [r8]
 8003326:	461c      	mov	r4, r3
 8003328:	bb44      	cbnz	r4, 800337c <_malloc_r+0x88>
 800332a:	4629      	mov	r1, r5
 800332c:	4630      	mov	r0, r6
 800332e:	f7ff ffbf 	bl	80032b0 <sbrk_aligned>
 8003332:	1c43      	adds	r3, r0, #1
 8003334:	4604      	mov	r4, r0
 8003336:	d158      	bne.n	80033ea <_malloc_r+0xf6>
 8003338:	f8d8 4000 	ldr.w	r4, [r8]
 800333c:	4627      	mov	r7, r4
 800333e:	2f00      	cmp	r7, #0
 8003340:	d143      	bne.n	80033ca <_malloc_r+0xd6>
 8003342:	2c00      	cmp	r4, #0
 8003344:	d04b      	beq.n	80033de <_malloc_r+0xea>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	4639      	mov	r1, r7
 800334a:	4630      	mov	r0, r6
 800334c:	eb04 0903 	add.w	r9, r4, r3
 8003350:	f000 fb5c 	bl	8003a0c <_sbrk_r>
 8003354:	4581      	cmp	r9, r0
 8003356:	d142      	bne.n	80033de <_malloc_r+0xea>
 8003358:	6821      	ldr	r1, [r4, #0]
 800335a:	1a6d      	subs	r5, r5, r1
 800335c:	4629      	mov	r1, r5
 800335e:	4630      	mov	r0, r6
 8003360:	f7ff ffa6 	bl	80032b0 <sbrk_aligned>
 8003364:	3001      	adds	r0, #1
 8003366:	d03a      	beq.n	80033de <_malloc_r+0xea>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	442b      	add	r3, r5
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	f8d8 3000 	ldr.w	r3, [r8]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	bb62      	cbnz	r2, 80033d0 <_malloc_r+0xdc>
 8003376:	f8c8 7000 	str.w	r7, [r8]
 800337a:	e00f      	b.n	800339c <_malloc_r+0xa8>
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	1b52      	subs	r2, r2, r5
 8003380:	d420      	bmi.n	80033c4 <_malloc_r+0xd0>
 8003382:	2a0b      	cmp	r2, #11
 8003384:	d917      	bls.n	80033b6 <_malloc_r+0xc2>
 8003386:	1961      	adds	r1, r4, r5
 8003388:	42a3      	cmp	r3, r4
 800338a:	6025      	str	r5, [r4, #0]
 800338c:	bf18      	it	ne
 800338e:	6059      	strne	r1, [r3, #4]
 8003390:	6863      	ldr	r3, [r4, #4]
 8003392:	bf08      	it	eq
 8003394:	f8c8 1000 	streq.w	r1, [r8]
 8003398:	5162      	str	r2, [r4, r5]
 800339a:	604b      	str	r3, [r1, #4]
 800339c:	4630      	mov	r0, r6
 800339e:	f000 f82f 	bl	8003400 <__malloc_unlock>
 80033a2:	f104 000b 	add.w	r0, r4, #11
 80033a6:	1d23      	adds	r3, r4, #4
 80033a8:	f020 0007 	bic.w	r0, r0, #7
 80033ac:	1ac2      	subs	r2, r0, r3
 80033ae:	bf1c      	itt	ne
 80033b0:	1a1b      	subne	r3, r3, r0
 80033b2:	50a3      	strne	r3, [r4, r2]
 80033b4:	e7af      	b.n	8003316 <_malloc_r+0x22>
 80033b6:	6862      	ldr	r2, [r4, #4]
 80033b8:	42a3      	cmp	r3, r4
 80033ba:	bf0c      	ite	eq
 80033bc:	f8c8 2000 	streq.w	r2, [r8]
 80033c0:	605a      	strne	r2, [r3, #4]
 80033c2:	e7eb      	b.n	800339c <_malloc_r+0xa8>
 80033c4:	4623      	mov	r3, r4
 80033c6:	6864      	ldr	r4, [r4, #4]
 80033c8:	e7ae      	b.n	8003328 <_malloc_r+0x34>
 80033ca:	463c      	mov	r4, r7
 80033cc:	687f      	ldr	r7, [r7, #4]
 80033ce:	e7b6      	b.n	800333e <_malloc_r+0x4a>
 80033d0:	461a      	mov	r2, r3
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	42a3      	cmp	r3, r4
 80033d6:	d1fb      	bne.n	80033d0 <_malloc_r+0xdc>
 80033d8:	2300      	movs	r3, #0
 80033da:	6053      	str	r3, [r2, #4]
 80033dc:	e7de      	b.n	800339c <_malloc_r+0xa8>
 80033de:	230c      	movs	r3, #12
 80033e0:	6033      	str	r3, [r6, #0]
 80033e2:	4630      	mov	r0, r6
 80033e4:	f000 f80c 	bl	8003400 <__malloc_unlock>
 80033e8:	e794      	b.n	8003314 <_malloc_r+0x20>
 80033ea:	6005      	str	r5, [r0, #0]
 80033ec:	e7d6      	b.n	800339c <_malloc_r+0xa8>
 80033ee:	bf00      	nop
 80033f0:	20000264 	.word	0x20000264

080033f4 <__malloc_lock>:
 80033f4:	4801      	ldr	r0, [pc, #4]	@ (80033fc <__malloc_lock+0x8>)
 80033f6:	f7ff bf0f 	b.w	8003218 <__retarget_lock_acquire_recursive>
 80033fa:	bf00      	nop
 80033fc:	2000025c 	.word	0x2000025c

08003400 <__malloc_unlock>:
 8003400:	4801      	ldr	r0, [pc, #4]	@ (8003408 <__malloc_unlock+0x8>)
 8003402:	f7ff bf0a 	b.w	800321a <__retarget_lock_release_recursive>
 8003406:	bf00      	nop
 8003408:	2000025c 	.word	0x2000025c

0800340c <__ssputs_r>:
 800340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003410:	688e      	ldr	r6, [r1, #8]
 8003412:	461f      	mov	r7, r3
 8003414:	42be      	cmp	r6, r7
 8003416:	680b      	ldr	r3, [r1, #0]
 8003418:	4682      	mov	sl, r0
 800341a:	460c      	mov	r4, r1
 800341c:	4690      	mov	r8, r2
 800341e:	d82d      	bhi.n	800347c <__ssputs_r+0x70>
 8003420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003424:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003428:	d026      	beq.n	8003478 <__ssputs_r+0x6c>
 800342a:	6965      	ldr	r5, [r4, #20]
 800342c:	6909      	ldr	r1, [r1, #16]
 800342e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003432:	eba3 0901 	sub.w	r9, r3, r1
 8003436:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800343a:	1c7b      	adds	r3, r7, #1
 800343c:	444b      	add	r3, r9
 800343e:	106d      	asrs	r5, r5, #1
 8003440:	429d      	cmp	r5, r3
 8003442:	bf38      	it	cc
 8003444:	461d      	movcc	r5, r3
 8003446:	0553      	lsls	r3, r2, #21
 8003448:	d527      	bpl.n	800349a <__ssputs_r+0x8e>
 800344a:	4629      	mov	r1, r5
 800344c:	f7ff ff52 	bl	80032f4 <_malloc_r>
 8003450:	4606      	mov	r6, r0
 8003452:	b360      	cbz	r0, 80034ae <__ssputs_r+0xa2>
 8003454:	6921      	ldr	r1, [r4, #16]
 8003456:	464a      	mov	r2, r9
 8003458:	f000 fae8 	bl	8003a2c <memcpy>
 800345c:	89a3      	ldrh	r3, [r4, #12]
 800345e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003466:	81a3      	strh	r3, [r4, #12]
 8003468:	6126      	str	r6, [r4, #16]
 800346a:	6165      	str	r5, [r4, #20]
 800346c:	444e      	add	r6, r9
 800346e:	eba5 0509 	sub.w	r5, r5, r9
 8003472:	6026      	str	r6, [r4, #0]
 8003474:	60a5      	str	r5, [r4, #8]
 8003476:	463e      	mov	r6, r7
 8003478:	42be      	cmp	r6, r7
 800347a:	d900      	bls.n	800347e <__ssputs_r+0x72>
 800347c:	463e      	mov	r6, r7
 800347e:	6820      	ldr	r0, [r4, #0]
 8003480:	4632      	mov	r2, r6
 8003482:	4641      	mov	r1, r8
 8003484:	f000 faa8 	bl	80039d8 <memmove>
 8003488:	68a3      	ldr	r3, [r4, #8]
 800348a:	1b9b      	subs	r3, r3, r6
 800348c:	60a3      	str	r3, [r4, #8]
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	4433      	add	r3, r6
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	2000      	movs	r0, #0
 8003496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349a:	462a      	mov	r2, r5
 800349c:	f000 fad4 	bl	8003a48 <_realloc_r>
 80034a0:	4606      	mov	r6, r0
 80034a2:	2800      	cmp	r0, #0
 80034a4:	d1e0      	bne.n	8003468 <__ssputs_r+0x5c>
 80034a6:	6921      	ldr	r1, [r4, #16]
 80034a8:	4650      	mov	r0, sl
 80034aa:	f7ff feb7 	bl	800321c <_free_r>
 80034ae:	230c      	movs	r3, #12
 80034b0:	f8ca 3000 	str.w	r3, [sl]
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034ba:	81a3      	strh	r3, [r4, #12]
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	e7e9      	b.n	8003496 <__ssputs_r+0x8a>
	...

080034c4 <_svfiprintf_r>:
 80034c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	4698      	mov	r8, r3
 80034ca:	898b      	ldrh	r3, [r1, #12]
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	b09d      	sub	sp, #116	@ 0x74
 80034d0:	4607      	mov	r7, r0
 80034d2:	460d      	mov	r5, r1
 80034d4:	4614      	mov	r4, r2
 80034d6:	d510      	bpl.n	80034fa <_svfiprintf_r+0x36>
 80034d8:	690b      	ldr	r3, [r1, #16]
 80034da:	b973      	cbnz	r3, 80034fa <_svfiprintf_r+0x36>
 80034dc:	2140      	movs	r1, #64	@ 0x40
 80034de:	f7ff ff09 	bl	80032f4 <_malloc_r>
 80034e2:	6028      	str	r0, [r5, #0]
 80034e4:	6128      	str	r0, [r5, #16]
 80034e6:	b930      	cbnz	r0, 80034f6 <_svfiprintf_r+0x32>
 80034e8:	230c      	movs	r3, #12
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	b01d      	add	sp, #116	@ 0x74
 80034f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f6:	2340      	movs	r3, #64	@ 0x40
 80034f8:	616b      	str	r3, [r5, #20]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80034fe:	2320      	movs	r3, #32
 8003500:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003504:	f8cd 800c 	str.w	r8, [sp, #12]
 8003508:	2330      	movs	r3, #48	@ 0x30
 800350a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80036a8 <_svfiprintf_r+0x1e4>
 800350e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003512:	f04f 0901 	mov.w	r9, #1
 8003516:	4623      	mov	r3, r4
 8003518:	469a      	mov	sl, r3
 800351a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800351e:	b10a      	cbz	r2, 8003524 <_svfiprintf_r+0x60>
 8003520:	2a25      	cmp	r2, #37	@ 0x25
 8003522:	d1f9      	bne.n	8003518 <_svfiprintf_r+0x54>
 8003524:	ebba 0b04 	subs.w	fp, sl, r4
 8003528:	d00b      	beq.n	8003542 <_svfiprintf_r+0x7e>
 800352a:	465b      	mov	r3, fp
 800352c:	4622      	mov	r2, r4
 800352e:	4629      	mov	r1, r5
 8003530:	4638      	mov	r0, r7
 8003532:	f7ff ff6b 	bl	800340c <__ssputs_r>
 8003536:	3001      	adds	r0, #1
 8003538:	f000 80a7 	beq.w	800368a <_svfiprintf_r+0x1c6>
 800353c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800353e:	445a      	add	r2, fp
 8003540:	9209      	str	r2, [sp, #36]	@ 0x24
 8003542:	f89a 3000 	ldrb.w	r3, [sl]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 809f 	beq.w	800368a <_svfiprintf_r+0x1c6>
 800354c:	2300      	movs	r3, #0
 800354e:	f04f 32ff 	mov.w	r2, #4294967295
 8003552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003556:	f10a 0a01 	add.w	sl, sl, #1
 800355a:	9304      	str	r3, [sp, #16]
 800355c:	9307      	str	r3, [sp, #28]
 800355e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003562:	931a      	str	r3, [sp, #104]	@ 0x68
 8003564:	4654      	mov	r4, sl
 8003566:	2205      	movs	r2, #5
 8003568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800356c:	484e      	ldr	r0, [pc, #312]	@ (80036a8 <_svfiprintf_r+0x1e4>)
 800356e:	f7fc fe37 	bl	80001e0 <memchr>
 8003572:	9a04      	ldr	r2, [sp, #16]
 8003574:	b9d8      	cbnz	r0, 80035ae <_svfiprintf_r+0xea>
 8003576:	06d0      	lsls	r0, r2, #27
 8003578:	bf44      	itt	mi
 800357a:	2320      	movmi	r3, #32
 800357c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003580:	0711      	lsls	r1, r2, #28
 8003582:	bf44      	itt	mi
 8003584:	232b      	movmi	r3, #43	@ 0x2b
 8003586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800358a:	f89a 3000 	ldrb.w	r3, [sl]
 800358e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003590:	d015      	beq.n	80035be <_svfiprintf_r+0xfa>
 8003592:	9a07      	ldr	r2, [sp, #28]
 8003594:	4654      	mov	r4, sl
 8003596:	2000      	movs	r0, #0
 8003598:	f04f 0c0a 	mov.w	ip, #10
 800359c:	4621      	mov	r1, r4
 800359e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035a2:	3b30      	subs	r3, #48	@ 0x30
 80035a4:	2b09      	cmp	r3, #9
 80035a6:	d94b      	bls.n	8003640 <_svfiprintf_r+0x17c>
 80035a8:	b1b0      	cbz	r0, 80035d8 <_svfiprintf_r+0x114>
 80035aa:	9207      	str	r2, [sp, #28]
 80035ac:	e014      	b.n	80035d8 <_svfiprintf_r+0x114>
 80035ae:	eba0 0308 	sub.w	r3, r0, r8
 80035b2:	fa09 f303 	lsl.w	r3, r9, r3
 80035b6:	4313      	orrs	r3, r2
 80035b8:	9304      	str	r3, [sp, #16]
 80035ba:	46a2      	mov	sl, r4
 80035bc:	e7d2      	b.n	8003564 <_svfiprintf_r+0xa0>
 80035be:	9b03      	ldr	r3, [sp, #12]
 80035c0:	1d19      	adds	r1, r3, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	9103      	str	r1, [sp, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bfbb      	ittet	lt
 80035ca:	425b      	neglt	r3, r3
 80035cc:	f042 0202 	orrlt.w	r2, r2, #2
 80035d0:	9307      	strge	r3, [sp, #28]
 80035d2:	9307      	strlt	r3, [sp, #28]
 80035d4:	bfb8      	it	lt
 80035d6:	9204      	strlt	r2, [sp, #16]
 80035d8:	7823      	ldrb	r3, [r4, #0]
 80035da:	2b2e      	cmp	r3, #46	@ 0x2e
 80035dc:	d10a      	bne.n	80035f4 <_svfiprintf_r+0x130>
 80035de:	7863      	ldrb	r3, [r4, #1]
 80035e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80035e2:	d132      	bne.n	800364a <_svfiprintf_r+0x186>
 80035e4:	9b03      	ldr	r3, [sp, #12]
 80035e6:	1d1a      	adds	r2, r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	9203      	str	r2, [sp, #12]
 80035ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035f0:	3402      	adds	r4, #2
 80035f2:	9305      	str	r3, [sp, #20]
 80035f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80036b8 <_svfiprintf_r+0x1f4>
 80035f8:	7821      	ldrb	r1, [r4, #0]
 80035fa:	2203      	movs	r2, #3
 80035fc:	4650      	mov	r0, sl
 80035fe:	f7fc fdef 	bl	80001e0 <memchr>
 8003602:	b138      	cbz	r0, 8003614 <_svfiprintf_r+0x150>
 8003604:	9b04      	ldr	r3, [sp, #16]
 8003606:	eba0 000a 	sub.w	r0, r0, sl
 800360a:	2240      	movs	r2, #64	@ 0x40
 800360c:	4082      	lsls	r2, r0
 800360e:	4313      	orrs	r3, r2
 8003610:	3401      	adds	r4, #1
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003618:	4824      	ldr	r0, [pc, #144]	@ (80036ac <_svfiprintf_r+0x1e8>)
 800361a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800361e:	2206      	movs	r2, #6
 8003620:	f7fc fdde 	bl	80001e0 <memchr>
 8003624:	2800      	cmp	r0, #0
 8003626:	d036      	beq.n	8003696 <_svfiprintf_r+0x1d2>
 8003628:	4b21      	ldr	r3, [pc, #132]	@ (80036b0 <_svfiprintf_r+0x1ec>)
 800362a:	bb1b      	cbnz	r3, 8003674 <_svfiprintf_r+0x1b0>
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	3307      	adds	r3, #7
 8003630:	f023 0307 	bic.w	r3, r3, #7
 8003634:	3308      	adds	r3, #8
 8003636:	9303      	str	r3, [sp, #12]
 8003638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800363a:	4433      	add	r3, r6
 800363c:	9309      	str	r3, [sp, #36]	@ 0x24
 800363e:	e76a      	b.n	8003516 <_svfiprintf_r+0x52>
 8003640:	fb0c 3202 	mla	r2, ip, r2, r3
 8003644:	460c      	mov	r4, r1
 8003646:	2001      	movs	r0, #1
 8003648:	e7a8      	b.n	800359c <_svfiprintf_r+0xd8>
 800364a:	2300      	movs	r3, #0
 800364c:	3401      	adds	r4, #1
 800364e:	9305      	str	r3, [sp, #20]
 8003650:	4619      	mov	r1, r3
 8003652:	f04f 0c0a 	mov.w	ip, #10
 8003656:	4620      	mov	r0, r4
 8003658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800365c:	3a30      	subs	r2, #48	@ 0x30
 800365e:	2a09      	cmp	r2, #9
 8003660:	d903      	bls.n	800366a <_svfiprintf_r+0x1a6>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0c6      	beq.n	80035f4 <_svfiprintf_r+0x130>
 8003666:	9105      	str	r1, [sp, #20]
 8003668:	e7c4      	b.n	80035f4 <_svfiprintf_r+0x130>
 800366a:	fb0c 2101 	mla	r1, ip, r1, r2
 800366e:	4604      	mov	r4, r0
 8003670:	2301      	movs	r3, #1
 8003672:	e7f0      	b.n	8003656 <_svfiprintf_r+0x192>
 8003674:	ab03      	add	r3, sp, #12
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	462a      	mov	r2, r5
 800367a:	4b0e      	ldr	r3, [pc, #56]	@ (80036b4 <_svfiprintf_r+0x1f0>)
 800367c:	a904      	add	r1, sp, #16
 800367e:	4638      	mov	r0, r7
 8003680:	f3af 8000 	nop.w
 8003684:	1c42      	adds	r2, r0, #1
 8003686:	4606      	mov	r6, r0
 8003688:	d1d6      	bne.n	8003638 <_svfiprintf_r+0x174>
 800368a:	89ab      	ldrh	r3, [r5, #12]
 800368c:	065b      	lsls	r3, r3, #25
 800368e:	f53f af2d 	bmi.w	80034ec <_svfiprintf_r+0x28>
 8003692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003694:	e72c      	b.n	80034f0 <_svfiprintf_r+0x2c>
 8003696:	ab03      	add	r3, sp, #12
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	462a      	mov	r2, r5
 800369c:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <_svfiprintf_r+0x1f0>)
 800369e:	a904      	add	r1, sp, #16
 80036a0:	4638      	mov	r0, r7
 80036a2:	f000 f879 	bl	8003798 <_printf_i>
 80036a6:	e7ed      	b.n	8003684 <_svfiprintf_r+0x1c0>
 80036a8:	08003b14 	.word	0x08003b14
 80036ac:	08003b1e 	.word	0x08003b1e
 80036b0:	00000000 	.word	0x00000000
 80036b4:	0800340d 	.word	0x0800340d
 80036b8:	08003b1a 	.word	0x08003b1a

080036bc <_printf_common>:
 80036bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c0:	4616      	mov	r6, r2
 80036c2:	4698      	mov	r8, r3
 80036c4:	688a      	ldr	r2, [r1, #8]
 80036c6:	690b      	ldr	r3, [r1, #16]
 80036c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036cc:	4293      	cmp	r3, r2
 80036ce:	bfb8      	it	lt
 80036d0:	4613      	movlt	r3, r2
 80036d2:	6033      	str	r3, [r6, #0]
 80036d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036d8:	4607      	mov	r7, r0
 80036da:	460c      	mov	r4, r1
 80036dc:	b10a      	cbz	r2, 80036e2 <_printf_common+0x26>
 80036de:	3301      	adds	r3, #1
 80036e0:	6033      	str	r3, [r6, #0]
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	0699      	lsls	r1, r3, #26
 80036e6:	bf42      	ittt	mi
 80036e8:	6833      	ldrmi	r3, [r6, #0]
 80036ea:	3302      	addmi	r3, #2
 80036ec:	6033      	strmi	r3, [r6, #0]
 80036ee:	6825      	ldr	r5, [r4, #0]
 80036f0:	f015 0506 	ands.w	r5, r5, #6
 80036f4:	d106      	bne.n	8003704 <_printf_common+0x48>
 80036f6:	f104 0a19 	add.w	sl, r4, #25
 80036fa:	68e3      	ldr	r3, [r4, #12]
 80036fc:	6832      	ldr	r2, [r6, #0]
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	42ab      	cmp	r3, r5
 8003702:	dc26      	bgt.n	8003752 <_printf_common+0x96>
 8003704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003708:	6822      	ldr	r2, [r4, #0]
 800370a:	3b00      	subs	r3, #0
 800370c:	bf18      	it	ne
 800370e:	2301      	movne	r3, #1
 8003710:	0692      	lsls	r2, r2, #26
 8003712:	d42b      	bmi.n	800376c <_printf_common+0xb0>
 8003714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003718:	4641      	mov	r1, r8
 800371a:	4638      	mov	r0, r7
 800371c:	47c8      	blx	r9
 800371e:	3001      	adds	r0, #1
 8003720:	d01e      	beq.n	8003760 <_printf_common+0xa4>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	6922      	ldr	r2, [r4, #16]
 8003726:	f003 0306 	and.w	r3, r3, #6
 800372a:	2b04      	cmp	r3, #4
 800372c:	bf02      	ittt	eq
 800372e:	68e5      	ldreq	r5, [r4, #12]
 8003730:	6833      	ldreq	r3, [r6, #0]
 8003732:	1aed      	subeq	r5, r5, r3
 8003734:	68a3      	ldr	r3, [r4, #8]
 8003736:	bf0c      	ite	eq
 8003738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800373c:	2500      	movne	r5, #0
 800373e:	4293      	cmp	r3, r2
 8003740:	bfc4      	itt	gt
 8003742:	1a9b      	subgt	r3, r3, r2
 8003744:	18ed      	addgt	r5, r5, r3
 8003746:	2600      	movs	r6, #0
 8003748:	341a      	adds	r4, #26
 800374a:	42b5      	cmp	r5, r6
 800374c:	d11a      	bne.n	8003784 <_printf_common+0xc8>
 800374e:	2000      	movs	r0, #0
 8003750:	e008      	b.n	8003764 <_printf_common+0xa8>
 8003752:	2301      	movs	r3, #1
 8003754:	4652      	mov	r2, sl
 8003756:	4641      	mov	r1, r8
 8003758:	4638      	mov	r0, r7
 800375a:	47c8      	blx	r9
 800375c:	3001      	adds	r0, #1
 800375e:	d103      	bne.n	8003768 <_printf_common+0xac>
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003768:	3501      	adds	r5, #1
 800376a:	e7c6      	b.n	80036fa <_printf_common+0x3e>
 800376c:	18e1      	adds	r1, r4, r3
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	2030      	movs	r0, #48	@ 0x30
 8003772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003776:	4422      	add	r2, r4
 8003778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800377c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003780:	3302      	adds	r3, #2
 8003782:	e7c7      	b.n	8003714 <_printf_common+0x58>
 8003784:	2301      	movs	r3, #1
 8003786:	4622      	mov	r2, r4
 8003788:	4641      	mov	r1, r8
 800378a:	4638      	mov	r0, r7
 800378c:	47c8      	blx	r9
 800378e:	3001      	adds	r0, #1
 8003790:	d0e6      	beq.n	8003760 <_printf_common+0xa4>
 8003792:	3601      	adds	r6, #1
 8003794:	e7d9      	b.n	800374a <_printf_common+0x8e>
	...

08003798 <_printf_i>:
 8003798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800379c:	7e0f      	ldrb	r7, [r1, #24]
 800379e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037a0:	2f78      	cmp	r7, #120	@ 0x78
 80037a2:	4691      	mov	r9, r2
 80037a4:	4680      	mov	r8, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	469a      	mov	sl, r3
 80037aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037ae:	d807      	bhi.n	80037c0 <_printf_i+0x28>
 80037b0:	2f62      	cmp	r7, #98	@ 0x62
 80037b2:	d80a      	bhi.n	80037ca <_printf_i+0x32>
 80037b4:	2f00      	cmp	r7, #0
 80037b6:	f000 80d2 	beq.w	800395e <_printf_i+0x1c6>
 80037ba:	2f58      	cmp	r7, #88	@ 0x58
 80037bc:	f000 80b9 	beq.w	8003932 <_printf_i+0x19a>
 80037c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037c8:	e03a      	b.n	8003840 <_printf_i+0xa8>
 80037ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037ce:	2b15      	cmp	r3, #21
 80037d0:	d8f6      	bhi.n	80037c0 <_printf_i+0x28>
 80037d2:	a101      	add	r1, pc, #4	@ (adr r1, 80037d8 <_printf_i+0x40>)
 80037d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037d8:	08003831 	.word	0x08003831
 80037dc:	08003845 	.word	0x08003845
 80037e0:	080037c1 	.word	0x080037c1
 80037e4:	080037c1 	.word	0x080037c1
 80037e8:	080037c1 	.word	0x080037c1
 80037ec:	080037c1 	.word	0x080037c1
 80037f0:	08003845 	.word	0x08003845
 80037f4:	080037c1 	.word	0x080037c1
 80037f8:	080037c1 	.word	0x080037c1
 80037fc:	080037c1 	.word	0x080037c1
 8003800:	080037c1 	.word	0x080037c1
 8003804:	08003945 	.word	0x08003945
 8003808:	0800386f 	.word	0x0800386f
 800380c:	080038ff 	.word	0x080038ff
 8003810:	080037c1 	.word	0x080037c1
 8003814:	080037c1 	.word	0x080037c1
 8003818:	08003967 	.word	0x08003967
 800381c:	080037c1 	.word	0x080037c1
 8003820:	0800386f 	.word	0x0800386f
 8003824:	080037c1 	.word	0x080037c1
 8003828:	080037c1 	.word	0x080037c1
 800382c:	08003907 	.word	0x08003907
 8003830:	6833      	ldr	r3, [r6, #0]
 8003832:	1d1a      	adds	r2, r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6032      	str	r2, [r6, #0]
 8003838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800383c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003840:	2301      	movs	r3, #1
 8003842:	e09d      	b.n	8003980 <_printf_i+0x1e8>
 8003844:	6833      	ldr	r3, [r6, #0]
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	1d19      	adds	r1, r3, #4
 800384a:	6031      	str	r1, [r6, #0]
 800384c:	0606      	lsls	r6, r0, #24
 800384e:	d501      	bpl.n	8003854 <_printf_i+0xbc>
 8003850:	681d      	ldr	r5, [r3, #0]
 8003852:	e003      	b.n	800385c <_printf_i+0xc4>
 8003854:	0645      	lsls	r5, r0, #25
 8003856:	d5fb      	bpl.n	8003850 <_printf_i+0xb8>
 8003858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800385c:	2d00      	cmp	r5, #0
 800385e:	da03      	bge.n	8003868 <_printf_i+0xd0>
 8003860:	232d      	movs	r3, #45	@ 0x2d
 8003862:	426d      	negs	r5, r5
 8003864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003868:	4859      	ldr	r0, [pc, #356]	@ (80039d0 <_printf_i+0x238>)
 800386a:	230a      	movs	r3, #10
 800386c:	e011      	b.n	8003892 <_printf_i+0xfa>
 800386e:	6821      	ldr	r1, [r4, #0]
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	0608      	lsls	r0, r1, #24
 8003874:	f853 5b04 	ldr.w	r5, [r3], #4
 8003878:	d402      	bmi.n	8003880 <_printf_i+0xe8>
 800387a:	0649      	lsls	r1, r1, #25
 800387c:	bf48      	it	mi
 800387e:	b2ad      	uxthmi	r5, r5
 8003880:	2f6f      	cmp	r7, #111	@ 0x6f
 8003882:	4853      	ldr	r0, [pc, #332]	@ (80039d0 <_printf_i+0x238>)
 8003884:	6033      	str	r3, [r6, #0]
 8003886:	bf14      	ite	ne
 8003888:	230a      	movne	r3, #10
 800388a:	2308      	moveq	r3, #8
 800388c:	2100      	movs	r1, #0
 800388e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003892:	6866      	ldr	r6, [r4, #4]
 8003894:	60a6      	str	r6, [r4, #8]
 8003896:	2e00      	cmp	r6, #0
 8003898:	bfa2      	ittt	ge
 800389a:	6821      	ldrge	r1, [r4, #0]
 800389c:	f021 0104 	bicge.w	r1, r1, #4
 80038a0:	6021      	strge	r1, [r4, #0]
 80038a2:	b90d      	cbnz	r5, 80038a8 <_printf_i+0x110>
 80038a4:	2e00      	cmp	r6, #0
 80038a6:	d04b      	beq.n	8003940 <_printf_i+0x1a8>
 80038a8:	4616      	mov	r6, r2
 80038aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80038ae:	fb03 5711 	mls	r7, r3, r1, r5
 80038b2:	5dc7      	ldrb	r7, [r0, r7]
 80038b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038b8:	462f      	mov	r7, r5
 80038ba:	42bb      	cmp	r3, r7
 80038bc:	460d      	mov	r5, r1
 80038be:	d9f4      	bls.n	80038aa <_printf_i+0x112>
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d10b      	bne.n	80038dc <_printf_i+0x144>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	07df      	lsls	r7, r3, #31
 80038c8:	d508      	bpl.n	80038dc <_printf_i+0x144>
 80038ca:	6923      	ldr	r3, [r4, #16]
 80038cc:	6861      	ldr	r1, [r4, #4]
 80038ce:	4299      	cmp	r1, r3
 80038d0:	bfde      	ittt	le
 80038d2:	2330      	movle	r3, #48	@ 0x30
 80038d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038dc:	1b92      	subs	r2, r2, r6
 80038de:	6122      	str	r2, [r4, #16]
 80038e0:	f8cd a000 	str.w	sl, [sp]
 80038e4:	464b      	mov	r3, r9
 80038e6:	aa03      	add	r2, sp, #12
 80038e8:	4621      	mov	r1, r4
 80038ea:	4640      	mov	r0, r8
 80038ec:	f7ff fee6 	bl	80036bc <_printf_common>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d14a      	bne.n	800398a <_printf_i+0x1f2>
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	b004      	add	sp, #16
 80038fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	f043 0320 	orr.w	r3, r3, #32
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	4833      	ldr	r0, [pc, #204]	@ (80039d4 <_printf_i+0x23c>)
 8003908:	2778      	movs	r7, #120	@ 0x78
 800390a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	6831      	ldr	r1, [r6, #0]
 8003912:	061f      	lsls	r7, r3, #24
 8003914:	f851 5b04 	ldr.w	r5, [r1], #4
 8003918:	d402      	bmi.n	8003920 <_printf_i+0x188>
 800391a:	065f      	lsls	r7, r3, #25
 800391c:	bf48      	it	mi
 800391e:	b2ad      	uxthmi	r5, r5
 8003920:	6031      	str	r1, [r6, #0]
 8003922:	07d9      	lsls	r1, r3, #31
 8003924:	bf44      	itt	mi
 8003926:	f043 0320 	orrmi.w	r3, r3, #32
 800392a:	6023      	strmi	r3, [r4, #0]
 800392c:	b11d      	cbz	r5, 8003936 <_printf_i+0x19e>
 800392e:	2310      	movs	r3, #16
 8003930:	e7ac      	b.n	800388c <_printf_i+0xf4>
 8003932:	4827      	ldr	r0, [pc, #156]	@ (80039d0 <_printf_i+0x238>)
 8003934:	e7e9      	b.n	800390a <_printf_i+0x172>
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	f023 0320 	bic.w	r3, r3, #32
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	e7f6      	b.n	800392e <_printf_i+0x196>
 8003940:	4616      	mov	r6, r2
 8003942:	e7bd      	b.n	80038c0 <_printf_i+0x128>
 8003944:	6833      	ldr	r3, [r6, #0]
 8003946:	6825      	ldr	r5, [r4, #0]
 8003948:	6961      	ldr	r1, [r4, #20]
 800394a:	1d18      	adds	r0, r3, #4
 800394c:	6030      	str	r0, [r6, #0]
 800394e:	062e      	lsls	r6, r5, #24
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	d501      	bpl.n	8003958 <_printf_i+0x1c0>
 8003954:	6019      	str	r1, [r3, #0]
 8003956:	e002      	b.n	800395e <_printf_i+0x1c6>
 8003958:	0668      	lsls	r0, r5, #25
 800395a:	d5fb      	bpl.n	8003954 <_printf_i+0x1bc>
 800395c:	8019      	strh	r1, [r3, #0]
 800395e:	2300      	movs	r3, #0
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	4616      	mov	r6, r2
 8003964:	e7bc      	b.n	80038e0 <_printf_i+0x148>
 8003966:	6833      	ldr	r3, [r6, #0]
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	6032      	str	r2, [r6, #0]
 800396c:	681e      	ldr	r6, [r3, #0]
 800396e:	6862      	ldr	r2, [r4, #4]
 8003970:	2100      	movs	r1, #0
 8003972:	4630      	mov	r0, r6
 8003974:	f7fc fc34 	bl	80001e0 <memchr>
 8003978:	b108      	cbz	r0, 800397e <_printf_i+0x1e6>
 800397a:	1b80      	subs	r0, r0, r6
 800397c:	6060      	str	r0, [r4, #4]
 800397e:	6863      	ldr	r3, [r4, #4]
 8003980:	6123      	str	r3, [r4, #16]
 8003982:	2300      	movs	r3, #0
 8003984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003988:	e7aa      	b.n	80038e0 <_printf_i+0x148>
 800398a:	6923      	ldr	r3, [r4, #16]
 800398c:	4632      	mov	r2, r6
 800398e:	4649      	mov	r1, r9
 8003990:	4640      	mov	r0, r8
 8003992:	47d0      	blx	sl
 8003994:	3001      	adds	r0, #1
 8003996:	d0ad      	beq.n	80038f4 <_printf_i+0x15c>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	079b      	lsls	r3, r3, #30
 800399c:	d413      	bmi.n	80039c6 <_printf_i+0x22e>
 800399e:	68e0      	ldr	r0, [r4, #12]
 80039a0:	9b03      	ldr	r3, [sp, #12]
 80039a2:	4298      	cmp	r0, r3
 80039a4:	bfb8      	it	lt
 80039a6:	4618      	movlt	r0, r3
 80039a8:	e7a6      	b.n	80038f8 <_printf_i+0x160>
 80039aa:	2301      	movs	r3, #1
 80039ac:	4632      	mov	r2, r6
 80039ae:	4649      	mov	r1, r9
 80039b0:	4640      	mov	r0, r8
 80039b2:	47d0      	blx	sl
 80039b4:	3001      	adds	r0, #1
 80039b6:	d09d      	beq.n	80038f4 <_printf_i+0x15c>
 80039b8:	3501      	adds	r5, #1
 80039ba:	68e3      	ldr	r3, [r4, #12]
 80039bc:	9903      	ldr	r1, [sp, #12]
 80039be:	1a5b      	subs	r3, r3, r1
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	dcf2      	bgt.n	80039aa <_printf_i+0x212>
 80039c4:	e7eb      	b.n	800399e <_printf_i+0x206>
 80039c6:	2500      	movs	r5, #0
 80039c8:	f104 0619 	add.w	r6, r4, #25
 80039cc:	e7f5      	b.n	80039ba <_printf_i+0x222>
 80039ce:	bf00      	nop
 80039d0:	08003b25 	.word	0x08003b25
 80039d4:	08003b36 	.word	0x08003b36

080039d8 <memmove>:
 80039d8:	4288      	cmp	r0, r1
 80039da:	b510      	push	{r4, lr}
 80039dc:	eb01 0402 	add.w	r4, r1, r2
 80039e0:	d902      	bls.n	80039e8 <memmove+0x10>
 80039e2:	4284      	cmp	r4, r0
 80039e4:	4623      	mov	r3, r4
 80039e6:	d807      	bhi.n	80039f8 <memmove+0x20>
 80039e8:	1e43      	subs	r3, r0, #1
 80039ea:	42a1      	cmp	r1, r4
 80039ec:	d008      	beq.n	8003a00 <memmove+0x28>
 80039ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039f6:	e7f8      	b.n	80039ea <memmove+0x12>
 80039f8:	4402      	add	r2, r0
 80039fa:	4601      	mov	r1, r0
 80039fc:	428a      	cmp	r2, r1
 80039fe:	d100      	bne.n	8003a02 <memmove+0x2a>
 8003a00:	bd10      	pop	{r4, pc}
 8003a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a0a:	e7f7      	b.n	80039fc <memmove+0x24>

08003a0c <_sbrk_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4d06      	ldr	r5, [pc, #24]	@ (8003a28 <_sbrk_r+0x1c>)
 8003a10:	2300      	movs	r3, #0
 8003a12:	4604      	mov	r4, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	f7fd f9a6 	bl	8000d68 <_sbrk>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d102      	bne.n	8003a26 <_sbrk_r+0x1a>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	b103      	cbz	r3, 8003a26 <_sbrk_r+0x1a>
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	20000258 	.word	0x20000258

08003a2c <memcpy>:
 8003a2c:	440a      	add	r2, r1
 8003a2e:	4291      	cmp	r1, r2
 8003a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a34:	d100      	bne.n	8003a38 <memcpy+0xc>
 8003a36:	4770      	bx	lr
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a42:	4291      	cmp	r1, r2
 8003a44:	d1f9      	bne.n	8003a3a <memcpy+0xe>
 8003a46:	bd10      	pop	{r4, pc}

08003a48 <_realloc_r>:
 8003a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4c:	4680      	mov	r8, r0
 8003a4e:	4615      	mov	r5, r2
 8003a50:	460c      	mov	r4, r1
 8003a52:	b921      	cbnz	r1, 8003a5e <_realloc_r+0x16>
 8003a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a58:	4611      	mov	r1, r2
 8003a5a:	f7ff bc4b 	b.w	80032f4 <_malloc_r>
 8003a5e:	b92a      	cbnz	r2, 8003a6c <_realloc_r+0x24>
 8003a60:	f7ff fbdc 	bl	800321c <_free_r>
 8003a64:	2400      	movs	r4, #0
 8003a66:	4620      	mov	r0, r4
 8003a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a6c:	f000 f81a 	bl	8003aa4 <_malloc_usable_size_r>
 8003a70:	4285      	cmp	r5, r0
 8003a72:	4606      	mov	r6, r0
 8003a74:	d802      	bhi.n	8003a7c <_realloc_r+0x34>
 8003a76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a7a:	d8f4      	bhi.n	8003a66 <_realloc_r+0x1e>
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4640      	mov	r0, r8
 8003a80:	f7ff fc38 	bl	80032f4 <_malloc_r>
 8003a84:	4607      	mov	r7, r0
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d0ec      	beq.n	8003a64 <_realloc_r+0x1c>
 8003a8a:	42b5      	cmp	r5, r6
 8003a8c:	462a      	mov	r2, r5
 8003a8e:	4621      	mov	r1, r4
 8003a90:	bf28      	it	cs
 8003a92:	4632      	movcs	r2, r6
 8003a94:	f7ff ffca 	bl	8003a2c <memcpy>
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	f7ff fbbe 	bl	800321c <_free_r>
 8003aa0:	463c      	mov	r4, r7
 8003aa2:	e7e0      	b.n	8003a66 <_realloc_r+0x1e>

08003aa4 <_malloc_usable_size_r>:
 8003aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aa8:	1f18      	subs	r0, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bfbc      	itt	lt
 8003aae:	580b      	ldrlt	r3, [r1, r0]
 8003ab0:	18c0      	addlt	r0, r0, r3
 8003ab2:	4770      	bx	lr

08003ab4 <_init>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	bf00      	nop
 8003ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aba:	bc08      	pop	{r3}
 8003abc:	469e      	mov	lr, r3
 8003abe:	4770      	bx	lr

08003ac0 <_fini>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	bf00      	nop
 8003ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac6:	bc08      	pop	{r3}
 8003ac8:	469e      	mov	lr, r3
 8003aca:	4770      	bx	lr
